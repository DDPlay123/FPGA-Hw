
NIOS_LED.elf:     file format elf32-littlenios2
NIOS_LED.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00001ed0 memsz 0x00001ed0 flags r-x
    LOAD off    0x00002ef0 vaddr 0x00001ef0 paddr 0x000021d0 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x000034b0 vaddr 0x000024b0 paddr 0x000024b0 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001c94  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  00001ec4  00001ec4  00002ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00001ef0  000021d0  00002ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  000024b0  000024b0  000034b0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000025d0  000025d0  000031d0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000031d0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005b8  00000000  00000000  000031f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005a3a  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002368  00000000  00000000  000091ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000025ab  00000000  00000000  0000b552  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a38  00000000  00000000  0000db00  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000019e1  00000000  00000000  0000e538  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000974  00000000  00000000  0000ff19  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00010890  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000190  00000000  00000000  000108d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00012446  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  00012449  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00012451  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00012452  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00012453  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00012457  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001245b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001245f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00012468  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00012471  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0001247a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000000f  00000000  00000000  00012487  2**0
                  CONTENTS, READONLY
 29 .jdi          00005065  00000000  00000000  00012496  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006eb38  00000000  00000000  000174fb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00001ec4 l    d  .rodata	00000000 .rodata
00001ef0 l    d  .rwdata	00000000 .rwdata
000024b0 l    d  .bss	00000000 .bss
000025d0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../NIOS_LED_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 NIOS_LED_main.c
00000000 l    df *ABS*	00000000 alt_load.c
00000384 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000051c l     F .text	00000034 alt_dev_reg
00001ef0 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00000818 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000a64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000b98 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000bc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001024 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00001184 l     F .text	0000003c alt_get_errno
000011c0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
000020c4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000024c8 g     O .bss	00000004 alt_instruction_exception_handler
00000470 g     F .text	0000007c alt_main
000024d0 g     O .bss	00000100 alt_irq
000021d0 g       *ABS*	00000000 __flash_rwdata_start
00001630 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000024cc g     O .bss	00000004 errno
000024b4 g     O .bss	00000004 alt_argv
0000a1a4 g       *ABS*	00000000 _gp
000004ec g     F .text	00000030 usleep
00001f44 g     O .rwdata	00000180 alt_fd_list
00001654 g     F .text	00000090 alt_find_dev
00001108 g     F .text	0000007c alt_io_redirect
00001ec4 g       *ABS*	00000000 __DTOR_END__
000018b0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000698 g     F .text	000000ec altera_avalon_jtag_uart_read
00001dac g     F .text	00000064 .hidden __udivsi3
000021b4 g     O .rwdata	00000004 alt_max_fd
000021c8 g     O .rwdata	00000004 _global_impure_ptr
000025d0 g       *ABS*	00000000 __bss_end
00000f34 g     F .text	000000f0 alt_iic_isr_register
00001528 g     F .text	00000108 alt_tick
00000ee8 g     F .text	0000004c alt_ic_irq_enabled
0000148c g     F .text	0000009c alt_alarm_stop
000024bc g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00001f1c g     O .rwdata	00000028 alt_dev_null
00000b78 g     F .text	00000020 alt_dcache_flush_all
000021d0 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
000021ac g     O .rwdata	00000008 alt_dev_list
00001ef0 g       *ABS*	00000000 __ram_rodata_end
00001e10 g     F .text	00000058 .hidden __umodsi3
000025d0 g       *ABS*	00000000 end
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00001ec4 g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
00000890 g     F .text	0000007c alt_avalon_timer_sc_init
00000784 g     F .text	00000094 altera_avalon_jtag_uart_write
00001b24 g     F .text	00000190 __call_exitprocs
00000230 g     F .text	0000003c _start
000024c0 g     O .bss	00000004 _alt_tick_rate
000024c4 g     O .bss	00000004 _alt_nticks
00000588 g     F .text	00000050 alt_sys_init
000019cc g     F .text	00000158 __register_exitproc
00001e68 g     F .text	00000028 .hidden __mulsi3
00001ef0 g       *ABS*	00000000 __ram_rwdata_start
00001ec4 g       *ABS*	00000000 __ram_rodata_start
000005d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000017ec g     F .text	000000c4 alt_get_fd
0000090c g     F .text	00000158 alt_busy_sleep
00001980 g     F .text	00000030 memcmp
000025d0 g       *ABS*	00000000 __alt_stack_base
000016e4 g     F .text	00000108 alt_find_file
00000c00 g     F .text	000000a4 alt_dev_llist_insert
000024b0 g       *ABS*	00000000 __bss_start
0000026c g     F .text	00000118 main
000024b8 g     O .bss	00000004 alt_envp
00000638 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000021b8 g     O .rwdata	00000004 alt_errno
00001cb4 g     F .text	00000084 .hidden __divsi3
00001ec4 g       *ABS*	00000000 __CTOR_END__
00001ec4 g       *ABS*	00000000 __flash_rodata_start
00001ec4 g       *ABS*	00000000 __DTOR_LIST__
00000550 g     F .text	00000038 alt_irq_init
00001408 g     F .text	00000084 alt_release_fd
0000194c g     F .text	00000014 atexit
000021cc g     O .rwdata	00000004 _impure_ptr
000024b0 g     O .bss	00000004 alt_argc
00000d04 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000021a4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000d84 g     F .text	00000050 alt_ic_isr_register
000021d0 g       *ABS*	00000000 _edata
000025d0 g       *ABS*	00000000 _end
00000230 g       *ABS*	00000000 __ram_exceptions_end
00000e5c g     F .text	0000008c alt_ic_irq_disable
00001960 g     F .text	00000020 exit
00001d38 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001e90 g     F .text	00000034 _exit
000019b0 g     F .text	0000001c strlen
000012ac g     F .text	0000015c open
00000d64 g     F .text	00000020 alt_icache_flush_all
000021bc g     O .rwdata	00000004 alt_priority_mask
00000dd4 g     F .text	00000088 alt_ic_irq_enable
000021c0 g     O .rwdata	00000008 alt_alarm_list
00000ca4 g     F .text	00000060 _do_ctors
00000aa0 g     F .text	000000d8 close
000003ec g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800034 	movhi	r2,0
 140:	10893404 	addi	r2,r2,9424
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800034 	movhi	r2,0
 158:	10893404 	addi	r2,r2,9424
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <_gp+0xffff5f88>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <_gp+0xffff5f7c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a0c917 	ldw	r2,-31964(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a0c917 	ldw	r2,-31964(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
     238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     23c:	d6a86914 	ori	gp,gp,41380
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     244:	10892c14 	ori	r2,r2,9392

    movhi r3, %hi(__bss_end)
     248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     24c:	18c97414 	ori	r3,r3,9680

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <_gp+0xffff60b0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00003ec0 	call	3ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00004700 	call	470 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <_gp+0xffff60c4>

0000026c <main>:
#include <system.h>
#include <altera_avalon_pio_regs.h>
#include <unistd.h>

int main()
{
     26c:	defffe04 	addi	sp,sp,-8
     270:	dfc00115 	stw	ra,4(sp)
     274:	df000015 	stw	fp,0(sp)
     278:	d839883a 	mov	fp,sp
  while(1) {
      // Reset
      if (IORD_ALTERA_AVALON_PIO_DATA(SW_BASE)==0) {
     27c:	00804034 	movhi	r2,256
     280:	10801404 	addi	r2,r2,80
     284:	10800037 	ldwio	r2,0(r2)
     288:	1000051e 	bne	r2,zero,2a0 <main+0x34>
          IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0xff);
     28c:	00c03fc4 	movi	r3,255
     290:	00804034 	movhi	r2,256
     294:	10801004 	addi	r2,r2,64
     298:	10c00035 	stwio	r3,0(r2)
     29c:	003ff706 	br	27c <_gp+0xffff60d8>
      } else {
          // LED Display
          IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x80);
     2a0:	00c02004 	movi	r3,128
     2a4:	00804034 	movhi	r2,256
     2a8:	10801004 	addi	r2,r2,64
     2ac:	10c00035 	stwio	r3,0(r2)
          // Delay 0.5s
          usleep(500000);
     2b0:	01000234 	movhi	r4,8
     2b4:	21284804 	addi	r4,r4,-24288
     2b8:	00004ec0 	call	4ec <usleep>
          IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x40);
     2bc:	00c01004 	movi	r3,64
     2c0:	00804034 	movhi	r2,256
     2c4:	10801004 	addi	r2,r2,64
     2c8:	10c00035 	stwio	r3,0(r2)
          usleep(500000);
     2cc:	01000234 	movhi	r4,8
     2d0:	21284804 	addi	r4,r4,-24288
     2d4:	00004ec0 	call	4ec <usleep>
          IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x20);
     2d8:	00c00804 	movi	r3,32
     2dc:	00804034 	movhi	r2,256
     2e0:	10801004 	addi	r2,r2,64
     2e4:	10c00035 	stwio	r3,0(r2)
          usleep(500000);
     2e8:	01000234 	movhi	r4,8
     2ec:	21284804 	addi	r4,r4,-24288
     2f0:	00004ec0 	call	4ec <usleep>
          IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x10);
     2f4:	00c00404 	movi	r3,16
     2f8:	00804034 	movhi	r2,256
     2fc:	10801004 	addi	r2,r2,64
     300:	10c00035 	stwio	r3,0(r2)
          usleep(500000);
     304:	01000234 	movhi	r4,8
     308:	21284804 	addi	r4,r4,-24288
     30c:	00004ec0 	call	4ec <usleep>
          IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x08);
     310:	00c00204 	movi	r3,8
     314:	00804034 	movhi	r2,256
     318:	10801004 	addi	r2,r2,64
     31c:	10c00035 	stwio	r3,0(r2)
          usleep(500000);
     320:	01000234 	movhi	r4,8
     324:	21284804 	addi	r4,r4,-24288
     328:	00004ec0 	call	4ec <usleep>
          IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x04);
     32c:	00c00104 	movi	r3,4
     330:	00804034 	movhi	r2,256
     334:	10801004 	addi	r2,r2,64
     338:	10c00035 	stwio	r3,0(r2)
          usleep(500000);
     33c:	01000234 	movhi	r4,8
     340:	21284804 	addi	r4,r4,-24288
     344:	00004ec0 	call	4ec <usleep>
          IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x02);
     348:	00c00084 	movi	r3,2
     34c:	00804034 	movhi	r2,256
     350:	10801004 	addi	r2,r2,64
     354:	10c00035 	stwio	r3,0(r2)
          usleep(500000);
     358:	01000234 	movhi	r4,8
     35c:	21284804 	addi	r4,r4,-24288
     360:	00004ec0 	call	4ec <usleep>
          IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x01);
     364:	00c00044 	movi	r3,1
     368:	00804034 	movhi	r2,256
     36c:	10801004 	addi	r2,r2,64
     370:	10c00035 	stwio	r3,0(r2)
          usleep(500000);
     374:	01000234 	movhi	r4,8
     378:	21284804 	addi	r4,r4,-24288
     37c:	00004ec0 	call	4ec <usleep>
      }
  }
     380:	003fbe06 	br	27c <_gp+0xffff60d8>

00000384 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     384:	defffc04 	addi	sp,sp,-16
     388:	df000315 	stw	fp,12(sp)
     38c:	df000304 	addi	fp,sp,12
     390:	e13ffd15 	stw	r4,-12(fp)
     394:	e17ffe15 	stw	r5,-8(fp)
     398:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     39c:	e0fffe17 	ldw	r3,-8(fp)
     3a0:	e0bffd17 	ldw	r2,-12(fp)
     3a4:	18800c26 	beq	r3,r2,3d8 <alt_load_section+0x54>
  {
    while( to != end )
     3a8:	00000806 	br	3cc <alt_load_section+0x48>
    {
      *to++ = *from++;
     3ac:	e0bffe17 	ldw	r2,-8(fp)
     3b0:	10c00104 	addi	r3,r2,4
     3b4:	e0fffe15 	stw	r3,-8(fp)
     3b8:	e0fffd17 	ldw	r3,-12(fp)
     3bc:	19000104 	addi	r4,r3,4
     3c0:	e13ffd15 	stw	r4,-12(fp)
     3c4:	18c00017 	ldw	r3,0(r3)
     3c8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     3cc:	e0fffe17 	ldw	r3,-8(fp)
     3d0:	e0bfff17 	ldw	r2,-4(fp)
     3d4:	18bff51e 	bne	r3,r2,3ac <_gp+0xffff6208>
    {
      *to++ = *from++;
    }
  }
}
     3d8:	0001883a 	nop
     3dc:	e037883a 	mov	sp,fp
     3e0:	df000017 	ldw	fp,0(sp)
     3e4:	dec00104 	addi	sp,sp,4
     3e8:	f800283a 	ret

000003ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     3ec:	defffe04 	addi	sp,sp,-8
     3f0:	dfc00115 	stw	ra,4(sp)
     3f4:	df000015 	stw	fp,0(sp)
     3f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     3fc:	01800034 	movhi	r6,0
     400:	31887404 	addi	r6,r6,8656
     404:	01400034 	movhi	r5,0
     408:	2947bc04 	addi	r5,r5,7920
     40c:	01000034 	movhi	r4,0
     410:	21087404 	addi	r4,r4,8656
     414:	00003840 	call	384 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     418:	01800034 	movhi	r6,0
     41c:	31808c04 	addi	r6,r6,560
     420:	01400034 	movhi	r5,0
     424:	29400804 	addi	r5,r5,32
     428:	01000034 	movhi	r4,0
     42c:	21000804 	addi	r4,r4,32
     430:	00003840 	call	384 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     434:	01800034 	movhi	r6,0
     438:	3187bc04 	addi	r6,r6,7920
     43c:	01400034 	movhi	r5,0
     440:	2947b104 	addi	r5,r5,7876
     444:	01000034 	movhi	r4,0
     448:	2107b104 	addi	r4,r4,7876
     44c:	00003840 	call	384 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     450:	0000b780 	call	b78 <alt_dcache_flush_all>
  alt_icache_flush_all();
     454:	0000d640 	call	d64 <alt_icache_flush_all>
}
     458:	0001883a 	nop
     45c:	e037883a 	mov	sp,fp
     460:	dfc00117 	ldw	ra,4(sp)
     464:	df000017 	ldw	fp,0(sp)
     468:	dec00204 	addi	sp,sp,8
     46c:	f800283a 	ret

00000470 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     470:	defffd04 	addi	sp,sp,-12
     474:	dfc00215 	stw	ra,8(sp)
     478:	df000115 	stw	fp,4(sp)
     47c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     480:	0009883a 	mov	r4,zero
     484:	00005500 	call	550 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     488:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     48c:	00005880 	call	588 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     490:	01800034 	movhi	r6,0
     494:	3187b104 	addi	r6,r6,7876
     498:	01400034 	movhi	r5,0
     49c:	2947b104 	addi	r5,r5,7876
     4a0:	01000034 	movhi	r4,0
     4a4:	2107b104 	addi	r4,r4,7876
     4a8:	00011080 	call	1108 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     4ac:	0000ca40 	call	ca4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     4b0:	01000034 	movhi	r4,0
     4b4:	21034104 	addi	r4,r4,3332
     4b8:	000194c0 	call	194c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     4bc:	d0a0c317 	ldw	r2,-31988(gp)
     4c0:	d0e0c417 	ldw	r3,-31984(gp)
     4c4:	d120c517 	ldw	r4,-31980(gp)
     4c8:	200d883a 	mov	r6,r4
     4cc:	180b883a 	mov	r5,r3
     4d0:	1009883a 	mov	r4,r2
     4d4:	000026c0 	call	26c <main>
     4d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     4dc:	01000044 	movi	r4,1
     4e0:	0000aa00 	call	aa0 <close>
  exit (result);
     4e4:	e13fff17 	ldw	r4,-4(fp)
     4e8:	00019600 	call	1960 <exit>

000004ec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     4ec:	defffd04 	addi	sp,sp,-12
     4f0:	dfc00215 	stw	ra,8(sp)
     4f4:	df000115 	stw	fp,4(sp)
     4f8:	df000104 	addi	fp,sp,4
     4fc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
     500:	e13fff17 	ldw	r4,-4(fp)
     504:	000090c0 	call	90c <alt_busy_sleep>
}
     508:	e037883a 	mov	sp,fp
     50c:	dfc00117 	ldw	ra,4(sp)
     510:	df000017 	ldw	fp,0(sp)
     514:	dec00204 	addi	sp,sp,8
     518:	f800283a 	ret

0000051c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     51c:	defffd04 	addi	sp,sp,-12
     520:	dfc00215 	stw	ra,8(sp)
     524:	df000115 	stw	fp,4(sp)
     528:	df000104 	addi	fp,sp,4
     52c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     530:	d1600204 	addi	r5,gp,-32760
     534:	e13fff17 	ldw	r4,-4(fp)
     538:	0000c000 	call	c00 <alt_dev_llist_insert>
}
     53c:	e037883a 	mov	sp,fp
     540:	dfc00117 	ldw	ra,4(sp)
     544:	df000017 	ldw	fp,0(sp)
     548:	dec00204 	addi	sp,sp,8
     54c:	f800283a 	ret

00000550 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     550:	defffd04 	addi	sp,sp,-12
     554:	dfc00215 	stw	ra,8(sp)
     558:	df000115 	stw	fp,4(sp)
     55c:	df000104 	addi	fp,sp,4
     560:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU, NIOS_CPU);
     564:	00016300 	call	1630 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     568:	00800044 	movi	r2,1
     56c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     570:	0001883a 	nop
     574:	e037883a 	mov	sp,fp
     578:	dfc00117 	ldw	ra,4(sp)
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00204 	addi	sp,sp,8
     584:	f800283a 	ret

00000588 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     588:	defffe04 	addi	sp,sp,-8
     58c:	dfc00115 	stw	ra,4(sp)
     590:	df000015 	stw	fp,0(sp)
     594:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_10MS, timer_10ms);
     598:	01c01904 	movi	r7,100
     59c:	01800044 	movi	r6,1
     5a0:	000b883a 	mov	r5,zero
     5a4:	01004034 	movhi	r4,256
     5a8:	21000804 	addi	r4,r4,32
     5ac:	00008900 	call	890 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
     5b0:	01000034 	movhi	r4,0
     5b4:	2107bc04 	addi	r4,r4,7920
     5b8:	000051c0 	call	51c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
     5bc:	0001883a 	nop
}
     5c0:	0001883a 	nop
     5c4:	e037883a 	mov	sp,fp
     5c8:	dfc00117 	ldw	ra,4(sp)
     5cc:	df000017 	ldw	fp,0(sp)
     5d0:	dec00204 	addi	sp,sp,8
     5d4:	f800283a 	ret

000005d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     5d8:	defffa04 	addi	sp,sp,-24
     5dc:	dfc00515 	stw	ra,20(sp)
     5e0:	df000415 	stw	fp,16(sp)
     5e4:	df000404 	addi	fp,sp,16
     5e8:	e13ffd15 	stw	r4,-12(fp)
     5ec:	e17ffe15 	stw	r5,-8(fp)
     5f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     5f4:	e0bffd17 	ldw	r2,-12(fp)
     5f8:	10800017 	ldw	r2,0(r2)
     5fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     600:	e0bffc17 	ldw	r2,-16(fp)
     604:	10c00a04 	addi	r3,r2,40
     608:	e0bffd17 	ldw	r2,-12(fp)
     60c:	10800217 	ldw	r2,8(r2)
     610:	100f883a 	mov	r7,r2
     614:	e1bfff17 	ldw	r6,-4(fp)
     618:	e17ffe17 	ldw	r5,-8(fp)
     61c:	1809883a 	mov	r4,r3
     620:	00006980 	call	698 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     624:	e037883a 	mov	sp,fp
     628:	dfc00117 	ldw	ra,4(sp)
     62c:	df000017 	ldw	fp,0(sp)
     630:	dec00204 	addi	sp,sp,8
     634:	f800283a 	ret

00000638 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     638:	defffa04 	addi	sp,sp,-24
     63c:	dfc00515 	stw	ra,20(sp)
     640:	df000415 	stw	fp,16(sp)
     644:	df000404 	addi	fp,sp,16
     648:	e13ffd15 	stw	r4,-12(fp)
     64c:	e17ffe15 	stw	r5,-8(fp)
     650:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     654:	e0bffd17 	ldw	r2,-12(fp)
     658:	10800017 	ldw	r2,0(r2)
     65c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     660:	e0bffc17 	ldw	r2,-16(fp)
     664:	10c00a04 	addi	r3,r2,40
     668:	e0bffd17 	ldw	r2,-12(fp)
     66c:	10800217 	ldw	r2,8(r2)
     670:	100f883a 	mov	r7,r2
     674:	e1bfff17 	ldw	r6,-4(fp)
     678:	e17ffe17 	ldw	r5,-8(fp)
     67c:	1809883a 	mov	r4,r3
     680:	00007840 	call	784 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     684:	e037883a 	mov	sp,fp
     688:	dfc00117 	ldw	ra,4(sp)
     68c:	df000017 	ldw	fp,0(sp)
     690:	dec00204 	addi	sp,sp,8
     694:	f800283a 	ret

00000698 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
     698:	defff704 	addi	sp,sp,-36
     69c:	df000815 	stw	fp,32(sp)
     6a0:	df000804 	addi	fp,sp,32
     6a4:	e13ffc15 	stw	r4,-16(fp)
     6a8:	e17ffd15 	stw	r5,-12(fp)
     6ac:	e1bffe15 	stw	r6,-8(fp)
     6b0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	10800017 	ldw	r2,0(r2)
     6bc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
     6c0:	e0bffd17 	ldw	r2,-12(fp)
     6c4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
     6c8:	e0bffe17 	ldw	r2,-8(fp)
     6cc:	e0fffd17 	ldw	r3,-12(fp)
     6d0:	1885883a 	add	r2,r3,r2
     6d4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
     6d8:	00001206 	br	724 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     6dc:	e0bff917 	ldw	r2,-28(fp)
     6e0:	10800037 	ldwio	r2,0(r2)
     6e4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
     6e8:	e0bffb17 	ldw	r2,-20(fp)
     6ec:	10a0000c 	andi	r2,r2,32768
     6f0:	10000626 	beq	r2,zero,70c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     6f4:	e0bff817 	ldw	r2,-32(fp)
     6f8:	10c00044 	addi	r3,r2,1
     6fc:	e0fff815 	stw	r3,-32(fp)
     700:	e0fffb17 	ldw	r3,-20(fp)
     704:	10c00005 	stb	r3,0(r2)
     708:	00000606 	br	724 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
     70c:	e0fff817 	ldw	r3,-32(fp)
     710:	e0bffd17 	ldw	r2,-12(fp)
     714:	1880071e 	bne	r3,r2,734 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
     718:	e0bfff17 	ldw	r2,-4(fp)
     71c:	1090000c 	andi	r2,r2,16384
     720:	1000061e 	bne	r2,zero,73c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
     724:	e0fff817 	ldw	r3,-32(fp)
     728:	e0bffa17 	ldw	r2,-24(fp)
     72c:	18bfeb36 	bltu	r3,r2,6dc <_gp+0xffff6538>
     730:	00000306 	br	740 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
     734:	0001883a 	nop
     738:	00000106 	br	740 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
     73c:	0001883a 	nop
    
  }

  if (ptr != buffer)
     740:	e0fff817 	ldw	r3,-32(fp)
     744:	e0bffd17 	ldw	r2,-12(fp)
     748:	18800426 	beq	r3,r2,75c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
     74c:	e0fff817 	ldw	r3,-32(fp)
     750:	e0bffd17 	ldw	r2,-12(fp)
     754:	1885c83a 	sub	r2,r3,r2
     758:	00000606 	br	774 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
     75c:	e0bfff17 	ldw	r2,-4(fp)
     760:	1090000c 	andi	r2,r2,16384
     764:	10000226 	beq	r2,zero,770 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
     768:	00bffd44 	movi	r2,-11
     76c:	00000106 	br	774 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
     770:	00bffec4 	movi	r2,-5
}
     774:	e037883a 	mov	sp,fp
     778:	df000017 	ldw	fp,0(sp)
     77c:	dec00104 	addi	sp,sp,4
     780:	f800283a 	ret

00000784 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     784:	defff904 	addi	sp,sp,-28
     788:	df000615 	stw	fp,24(sp)
     78c:	df000604 	addi	fp,sp,24
     790:	e13ffc15 	stw	r4,-16(fp)
     794:	e17ffd15 	stw	r5,-12(fp)
     798:	e1bffe15 	stw	r6,-8(fp)
     79c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
     7a0:	e0bffc17 	ldw	r2,-16(fp)
     7a4:	10800017 	ldw	r2,0(r2)
     7a8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
     7ac:	e0bffe17 	ldw	r2,-8(fp)
     7b0:	e0fffd17 	ldw	r3,-12(fp)
     7b4:	1885883a 	add	r2,r3,r2
     7b8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
     7bc:	00000e06 	br	7f8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
     7c0:	e0bffa17 	ldw	r2,-24(fp)
     7c4:	10800104 	addi	r2,r2,4
     7c8:	10800037 	ldwio	r2,0(r2)
     7cc:	10bfffec 	andhi	r2,r2,65535
     7d0:	10000926 	beq	r2,zero,7f8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
     7d4:	e0fffa17 	ldw	r3,-24(fp)
     7d8:	e0bffd17 	ldw	r2,-12(fp)
     7dc:	11000044 	addi	r4,r2,1
     7e0:	e13ffd15 	stw	r4,-12(fp)
     7e4:	10800003 	ldbu	r2,0(r2)
     7e8:	10803fcc 	andi	r2,r2,255
     7ec:	1080201c 	xori	r2,r2,128
     7f0:	10bfe004 	addi	r2,r2,-128
     7f4:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
     7f8:	e0fffd17 	ldw	r3,-12(fp)
     7fc:	e0bffb17 	ldw	r2,-20(fp)
     800:	18bfef36 	bltu	r3,r2,7c0 <_gp+0xffff661c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
     804:	e0bffe17 	ldw	r2,-8(fp)
}
     808:	e037883a 	mov	sp,fp
     80c:	df000017 	ldw	fp,0(sp)
     810:	dec00104 	addi	sp,sp,4
     814:	f800283a 	ret

00000818 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
     818:	defffa04 	addi	sp,sp,-24
     81c:	dfc00515 	stw	ra,20(sp)
     820:	df000415 	stw	fp,16(sp)
     824:	df000404 	addi	fp,sp,16
     828:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
     82c:	0007883a 	mov	r3,zero
     830:	e0bfff17 	ldw	r2,-4(fp)
     834:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
     838:	e0bfff17 	ldw	r2,-4(fp)
     83c:	10800104 	addi	r2,r2,4
     840:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     844:	0005303a 	rdctl	r2,status
     848:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     84c:	e0fffd17 	ldw	r3,-12(fp)
     850:	00bfff84 	movi	r2,-2
     854:	1884703a 	and	r2,r3,r2
     858:	1001703a 	wrctl	status,r2
  
  return context;
     85c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
     860:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
     864:	00015280 	call	1528 <alt_tick>
     868:	e0bffc17 	ldw	r2,-16(fp)
     86c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     870:	e0bffe17 	ldw	r2,-8(fp)
     874:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
     878:	0001883a 	nop
     87c:	e037883a 	mov	sp,fp
     880:	dfc00117 	ldw	ra,4(sp)
     884:	df000017 	ldw	fp,0(sp)
     888:	dec00204 	addi	sp,sp,8
     88c:	f800283a 	ret

00000890 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
     890:	defff804 	addi	sp,sp,-32
     894:	dfc00715 	stw	ra,28(sp)
     898:	df000615 	stw	fp,24(sp)
     89c:	df000604 	addi	fp,sp,24
     8a0:	e13ffc15 	stw	r4,-16(fp)
     8a4:	e17ffd15 	stw	r5,-12(fp)
     8a8:	e1bffe15 	stw	r6,-8(fp)
     8ac:	e1ffff15 	stw	r7,-4(fp)
     8b0:	e0bfff17 	ldw	r2,-4(fp)
     8b4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
     8b8:	d0a0c717 	ldw	r2,-31972(gp)
     8bc:	1000021e 	bne	r2,zero,8c8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
     8c0:	e0bffb17 	ldw	r2,-20(fp)
     8c4:	d0a0c715 	stw	r2,-31972(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
     8c8:	e0bffc17 	ldw	r2,-16(fp)
     8cc:	10800104 	addi	r2,r2,4
     8d0:	00c001c4 	movi	r3,7
     8d4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
     8d8:	d8000015 	stw	zero,0(sp)
     8dc:	e1fffc17 	ldw	r7,-16(fp)
     8e0:	01800034 	movhi	r6,0
     8e4:	31820604 	addi	r6,r6,2072
     8e8:	e17ffe17 	ldw	r5,-8(fp)
     8ec:	e13ffd17 	ldw	r4,-12(fp)
     8f0:	0000d840 	call	d84 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
     8f4:	0001883a 	nop
     8f8:	e037883a 	mov	sp,fp
     8fc:	dfc00117 	ldw	ra,4(sp)
     900:	df000017 	ldw	fp,0(sp)
     904:	dec00204 	addi	sp,sp,8
     908:	f800283a 	ret

0000090c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     90c:	defffa04 	addi	sp,sp,-24
     910:	dfc00515 	stw	ra,20(sp)
     914:	df000415 	stw	fp,16(sp)
     918:	df000404 	addi	fp,sp,16
     91c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     920:	00800244 	movi	r2,9
     924:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     928:	014003f4 	movhi	r5,15
     92c:	29509004 	addi	r5,r5,16960
     930:	e13ffd17 	ldw	r4,-12(fp)
     934:	0001e680 	call	1e68 <__mulsi3>
     938:	100b883a 	mov	r5,r2
     93c:	01017db4 	movhi	r4,1526
     940:	21384004 	addi	r4,r4,-7936
     944:	0001dac0 	call	1dac <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     948:	100b883a 	mov	r5,r2
     94c:	01200034 	movhi	r4,32768
     950:	213fffc4 	addi	r4,r4,-1
     954:	0001dac0 	call	1dac <__udivsi3>
     958:	100b883a 	mov	r5,r2
     95c:	e13fff17 	ldw	r4,-4(fp)
     960:	0001dac0 	call	1dac <__udivsi3>
     964:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
     968:	e0bffe17 	ldw	r2,-8(fp)
     96c:	10002a26 	beq	r2,zero,a18 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
     970:	e03ffc15 	stw	zero,-16(fp)
     974:	00001706 	br	9d4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     978:	00a00034 	movhi	r2,32768
     97c:	10bfffc4 	addi	r2,r2,-1
     980:	10bfffc4 	addi	r2,r2,-1
     984:	103ffe1e 	bne	r2,zero,980 <_gp+0xffff67dc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     988:	014003f4 	movhi	r5,15
     98c:	29509004 	addi	r5,r5,16960
     990:	e13ffd17 	ldw	r4,-12(fp)
     994:	0001e680 	call	1e68 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     998:	100b883a 	mov	r5,r2
     99c:	01017db4 	movhi	r4,1526
     9a0:	21384004 	addi	r4,r4,-7936
     9a4:	0001dac0 	call	1dac <__udivsi3>
     9a8:	100b883a 	mov	r5,r2
     9ac:	01200034 	movhi	r4,32768
     9b0:	213fffc4 	addi	r4,r4,-1
     9b4:	0001dac0 	call	1dac <__udivsi3>
     9b8:	1007883a 	mov	r3,r2
     9bc:	e0bfff17 	ldw	r2,-4(fp)
     9c0:	10c5c83a 	sub	r2,r2,r3
     9c4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     9c8:	e0bffc17 	ldw	r2,-16(fp)
     9cc:	10800044 	addi	r2,r2,1
     9d0:	e0bffc15 	stw	r2,-16(fp)
     9d4:	e0fffc17 	ldw	r3,-16(fp)
     9d8:	e0bffe17 	ldw	r2,-8(fp)
     9dc:	18bfe616 	blt	r3,r2,978 <_gp+0xffff67d4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     9e0:	014003f4 	movhi	r5,15
     9e4:	29509004 	addi	r5,r5,16960
     9e8:	e13ffd17 	ldw	r4,-12(fp)
     9ec:	0001e680 	call	1e68 <__mulsi3>
     9f0:	100b883a 	mov	r5,r2
     9f4:	01017db4 	movhi	r4,1526
     9f8:	21384004 	addi	r4,r4,-7936
     9fc:	0001dac0 	call	1dac <__udivsi3>
     a00:	e17fff17 	ldw	r5,-4(fp)
     a04:	1009883a 	mov	r4,r2
     a08:	0001e680 	call	1e68 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     a0c:	10bfffc4 	addi	r2,r2,-1
     a10:	103ffe1e 	bne	r2,zero,a0c <_gp+0xffff6868>
     a14:	00000d06 	br	a4c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     a18:	014003f4 	movhi	r5,15
     a1c:	29509004 	addi	r5,r5,16960
     a20:	e13ffd17 	ldw	r4,-12(fp)
     a24:	0001e680 	call	1e68 <__mulsi3>
     a28:	100b883a 	mov	r5,r2
     a2c:	01017db4 	movhi	r4,1526
     a30:	21384004 	addi	r4,r4,-7936
     a34:	0001dac0 	call	1dac <__udivsi3>
     a38:	e17fff17 	ldw	r5,-4(fp)
     a3c:	1009883a 	mov	r4,r2
     a40:	0001e680 	call	1e68 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     a44:	10bfffc4 	addi	r2,r2,-1
     a48:	00bffe16 	blt	zero,r2,a44 <_gp+0xffff68a0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     a4c:	0005883a 	mov	r2,zero
}
     a50:	e037883a 	mov	sp,fp
     a54:	dfc00117 	ldw	ra,4(sp)
     a58:	df000017 	ldw	fp,0(sp)
     a5c:	dec00204 	addi	sp,sp,8
     a60:	f800283a 	ret

00000a64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
     a64:	defffe04 	addi	sp,sp,-8
     a68:	dfc00115 	stw	ra,4(sp)
     a6c:	df000015 	stw	fp,0(sp)
     a70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
     a74:	d0a00517 	ldw	r2,-32748(gp)
     a78:	10000326 	beq	r2,zero,a88 <alt_get_errno+0x24>
     a7c:	d0a00517 	ldw	r2,-32748(gp)
     a80:	103ee83a 	callr	r2
     a84:	00000106 	br	a8c <alt_get_errno+0x28>
     a88:	d0a0ca04 	addi	r2,gp,-31960
}
     a8c:	e037883a 	mov	sp,fp
     a90:	dfc00117 	ldw	ra,4(sp)
     a94:	df000017 	ldw	fp,0(sp)
     a98:	dec00204 	addi	sp,sp,8
     a9c:	f800283a 	ret

00000aa0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     aa0:	defffb04 	addi	sp,sp,-20
     aa4:	dfc00415 	stw	ra,16(sp)
     aa8:	df000315 	stw	fp,12(sp)
     aac:	df000304 	addi	fp,sp,12
     ab0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10000816 	blt	r2,zero,adc <close+0x3c>
     abc:	01400304 	movi	r5,12
     ac0:	e13fff17 	ldw	r4,-4(fp)
     ac4:	0001e680 	call	1e68 <__mulsi3>
     ac8:	1007883a 	mov	r3,r2
     acc:	00800034 	movhi	r2,0
     ad0:	1087d104 	addi	r2,r2,8004
     ad4:	1885883a 	add	r2,r3,r2
     ad8:	00000106 	br	ae0 <close+0x40>
     adc:	0005883a 	mov	r2,zero
     ae0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
     ae4:	e0bffd17 	ldw	r2,-12(fp)
     ae8:	10001926 	beq	r2,zero,b50 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     aec:	e0bffd17 	ldw	r2,-12(fp)
     af0:	10800017 	ldw	r2,0(r2)
     af4:	10800417 	ldw	r2,16(r2)
     af8:	10000626 	beq	r2,zero,b14 <close+0x74>
     afc:	e0bffd17 	ldw	r2,-12(fp)
     b00:	10800017 	ldw	r2,0(r2)
     b04:	10800417 	ldw	r2,16(r2)
     b08:	e13ffd17 	ldw	r4,-12(fp)
     b0c:	103ee83a 	callr	r2
     b10:	00000106 	br	b18 <close+0x78>
     b14:	0005883a 	mov	r2,zero
     b18:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     b1c:	e13fff17 	ldw	r4,-4(fp)
     b20:	00014080 	call	1408 <alt_release_fd>
    if (rval < 0)
     b24:	e0bffe17 	ldw	r2,-8(fp)
     b28:	1000070e 	bge	r2,zero,b48 <close+0xa8>
    {
      ALT_ERRNO = -rval;
     b2c:	0000a640 	call	a64 <alt_get_errno>
     b30:	1007883a 	mov	r3,r2
     b34:	e0bffe17 	ldw	r2,-8(fp)
     b38:	0085c83a 	sub	r2,zero,r2
     b3c:	18800015 	stw	r2,0(r3)
      return -1;
     b40:	00bfffc4 	movi	r2,-1
     b44:	00000706 	br	b64 <close+0xc4>
    }
    return 0;
     b48:	0005883a 	mov	r2,zero
     b4c:	00000506 	br	b64 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
     b50:	0000a640 	call	a64 <alt_get_errno>
     b54:	1007883a 	mov	r3,r2
     b58:	00801444 	movi	r2,81
     b5c:	18800015 	stw	r2,0(r3)
    return -1;
     b60:	00bfffc4 	movi	r2,-1
  }
}
     b64:	e037883a 	mov	sp,fp
     b68:	dfc00117 	ldw	ra,4(sp)
     b6c:	df000017 	ldw	fp,0(sp)
     b70:	dec00204 	addi	sp,sp,8
     b74:	f800283a 	ret

00000b78 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
     b78:	deffff04 	addi	sp,sp,-4
     b7c:	df000015 	stw	fp,0(sp)
     b80:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     b84:	0001883a 	nop
     b88:	e037883a 	mov	sp,fp
     b8c:	df000017 	ldw	fp,0(sp)
     b90:	dec00104 	addi	sp,sp,4
     b94:	f800283a 	ret

00000b98 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
     b98:	defffc04 	addi	sp,sp,-16
     b9c:	df000315 	stw	fp,12(sp)
     ba0:	df000304 	addi	fp,sp,12
     ba4:	e13ffd15 	stw	r4,-12(fp)
     ba8:	e17ffe15 	stw	r5,-8(fp)
     bac:	e1bfff15 	stw	r6,-4(fp)
  return len;
     bb0:	e0bfff17 	ldw	r2,-4(fp)
}
     bb4:	e037883a 	mov	sp,fp
     bb8:	df000017 	ldw	fp,0(sp)
     bbc:	dec00104 	addi	sp,sp,4
     bc0:	f800283a 	ret

00000bc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
     bc4:	defffe04 	addi	sp,sp,-8
     bc8:	dfc00115 	stw	ra,4(sp)
     bcc:	df000015 	stw	fp,0(sp)
     bd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
     bd4:	d0a00517 	ldw	r2,-32748(gp)
     bd8:	10000326 	beq	r2,zero,be8 <alt_get_errno+0x24>
     bdc:	d0a00517 	ldw	r2,-32748(gp)
     be0:	103ee83a 	callr	r2
     be4:	00000106 	br	bec <alt_get_errno+0x28>
     be8:	d0a0ca04 	addi	r2,gp,-31960
}
     bec:	e037883a 	mov	sp,fp
     bf0:	dfc00117 	ldw	ra,4(sp)
     bf4:	df000017 	ldw	fp,0(sp)
     bf8:	dec00204 	addi	sp,sp,8
     bfc:	f800283a 	ret

00000c00 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
     c00:	defffa04 	addi	sp,sp,-24
     c04:	dfc00515 	stw	ra,20(sp)
     c08:	df000415 	stw	fp,16(sp)
     c0c:	df000404 	addi	fp,sp,16
     c10:	e13ffe15 	stw	r4,-8(fp)
     c14:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
     c18:	e0bffe17 	ldw	r2,-8(fp)
     c1c:	10000326 	beq	r2,zero,c2c <alt_dev_llist_insert+0x2c>
     c20:	e0bffe17 	ldw	r2,-8(fp)
     c24:	10800217 	ldw	r2,8(r2)
     c28:	1000061e 	bne	r2,zero,c44 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
     c2c:	0000bc40 	call	bc4 <alt_get_errno>
     c30:	1007883a 	mov	r3,r2
     c34:	00800584 	movi	r2,22
     c38:	18800015 	stw	r2,0(r3)
    return -EINVAL;
     c3c:	00bffa84 	movi	r2,-22
     c40:	00001306 	br	c90 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
     c44:	e0bffe17 	ldw	r2,-8(fp)
     c48:	e0ffff17 	ldw	r3,-4(fp)
     c4c:	e0fffc15 	stw	r3,-16(fp)
     c50:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
     c54:	e0bffd17 	ldw	r2,-12(fp)
     c58:	e0fffc17 	ldw	r3,-16(fp)
     c5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
     c60:	e0bffc17 	ldw	r2,-16(fp)
     c64:	10c00017 	ldw	r3,0(r2)
     c68:	e0bffd17 	ldw	r2,-12(fp)
     c6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
     c70:	e0bffc17 	ldw	r2,-16(fp)
     c74:	10800017 	ldw	r2,0(r2)
     c78:	e0fffd17 	ldw	r3,-12(fp)
     c7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
     c80:	e0bffc17 	ldw	r2,-16(fp)
     c84:	e0fffd17 	ldw	r3,-12(fp)
     c88:	10c00015 	stw	r3,0(r2)

  return 0;  
     c8c:	0005883a 	mov	r2,zero
}
     c90:	e037883a 	mov	sp,fp
     c94:	dfc00117 	ldw	ra,4(sp)
     c98:	df000017 	ldw	fp,0(sp)
     c9c:	dec00204 	addi	sp,sp,8
     ca0:	f800283a 	ret

00000ca4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
     ca4:	defffd04 	addi	sp,sp,-12
     ca8:	dfc00215 	stw	ra,8(sp)
     cac:	df000115 	stw	fp,4(sp)
     cb0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     cb4:	00800034 	movhi	r2,0
     cb8:	1087b004 	addi	r2,r2,7872
     cbc:	e0bfff15 	stw	r2,-4(fp)
     cc0:	00000606 	br	cdc <_do_ctors+0x38>
        (*ctor) (); 
     cc4:	e0bfff17 	ldw	r2,-4(fp)
     cc8:	10800017 	ldw	r2,0(r2)
     ccc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     cd0:	e0bfff17 	ldw	r2,-4(fp)
     cd4:	10bfff04 	addi	r2,r2,-4
     cd8:	e0bfff15 	stw	r2,-4(fp)
     cdc:	e0ffff17 	ldw	r3,-4(fp)
     ce0:	00800034 	movhi	r2,0
     ce4:	1087b104 	addi	r2,r2,7876
     ce8:	18bff62e 	bgeu	r3,r2,cc4 <_gp+0xffff6b20>
        (*ctor) (); 
}
     cec:	0001883a 	nop
     cf0:	e037883a 	mov	sp,fp
     cf4:	dfc00117 	ldw	ra,4(sp)
     cf8:	df000017 	ldw	fp,0(sp)
     cfc:	dec00204 	addi	sp,sp,8
     d00:	f800283a 	ret

00000d04 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
     d04:	defffd04 	addi	sp,sp,-12
     d08:	dfc00215 	stw	ra,8(sp)
     d0c:	df000115 	stw	fp,4(sp)
     d10:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     d14:	00800034 	movhi	r2,0
     d18:	1087b004 	addi	r2,r2,7872
     d1c:	e0bfff15 	stw	r2,-4(fp)
     d20:	00000606 	br	d3c <_do_dtors+0x38>
        (*dtor) (); 
     d24:	e0bfff17 	ldw	r2,-4(fp)
     d28:	10800017 	ldw	r2,0(r2)
     d2c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     d30:	e0bfff17 	ldw	r2,-4(fp)
     d34:	10bfff04 	addi	r2,r2,-4
     d38:	e0bfff15 	stw	r2,-4(fp)
     d3c:	e0ffff17 	ldw	r3,-4(fp)
     d40:	00800034 	movhi	r2,0
     d44:	1087b104 	addi	r2,r2,7876
     d48:	18bff62e 	bgeu	r3,r2,d24 <_gp+0xffff6b80>
        (*dtor) (); 
}
     d4c:	0001883a 	nop
     d50:	e037883a 	mov	sp,fp
     d54:	dfc00117 	ldw	ra,4(sp)
     d58:	df000017 	ldw	fp,0(sp)
     d5c:	dec00204 	addi	sp,sp,8
     d60:	f800283a 	ret

00000d64 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
     d64:	deffff04 	addi	sp,sp,-4
     d68:	df000015 	stw	fp,0(sp)
     d6c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
     d70:	0001883a 	nop
     d74:	e037883a 	mov	sp,fp
     d78:	df000017 	ldw	fp,0(sp)
     d7c:	dec00104 	addi	sp,sp,4
     d80:	f800283a 	ret

00000d84 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     d84:	defff904 	addi	sp,sp,-28
     d88:	dfc00615 	stw	ra,24(sp)
     d8c:	df000515 	stw	fp,20(sp)
     d90:	df000504 	addi	fp,sp,20
     d94:	e13ffc15 	stw	r4,-16(fp)
     d98:	e17ffd15 	stw	r5,-12(fp)
     d9c:	e1bffe15 	stw	r6,-8(fp)
     da0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
     da4:	e0800217 	ldw	r2,8(fp)
     da8:	d8800015 	stw	r2,0(sp)
     dac:	e1ffff17 	ldw	r7,-4(fp)
     db0:	e1bffe17 	ldw	r6,-8(fp)
     db4:	e17ffd17 	ldw	r5,-12(fp)
     db8:	e13ffc17 	ldw	r4,-16(fp)
     dbc:	0000f340 	call	f34 <alt_iic_isr_register>
}  
     dc0:	e037883a 	mov	sp,fp
     dc4:	dfc00117 	ldw	ra,4(sp)
     dc8:	df000017 	ldw	fp,0(sp)
     dcc:	dec00204 	addi	sp,sp,8
     dd0:	f800283a 	ret

00000dd4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
     dd4:	defff904 	addi	sp,sp,-28
     dd8:	df000615 	stw	fp,24(sp)
     ddc:	df000604 	addi	fp,sp,24
     de0:	e13ffe15 	stw	r4,-8(fp)
     de4:	e17fff15 	stw	r5,-4(fp)
     de8:	e0bfff17 	ldw	r2,-4(fp)
     dec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     df0:	0005303a 	rdctl	r2,status
     df4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     df8:	e0fffb17 	ldw	r3,-20(fp)
     dfc:	00bfff84 	movi	r2,-2
     e00:	1884703a 	and	r2,r3,r2
     e04:	1001703a 	wrctl	status,r2
  
  return context;
     e08:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     e0c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
     e10:	00c00044 	movi	r3,1
     e14:	e0bffa17 	ldw	r2,-24(fp)
     e18:	1884983a 	sll	r2,r3,r2
     e1c:	1007883a 	mov	r3,r2
     e20:	d0a0c617 	ldw	r2,-31976(gp)
     e24:	1884b03a 	or	r2,r3,r2
     e28:	d0a0c615 	stw	r2,-31976(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     e2c:	d0a0c617 	ldw	r2,-31976(gp)
     e30:	100170fa 	wrctl	ienable,r2
     e34:	e0bffc17 	ldw	r2,-16(fp)
     e38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     e3c:	e0bffd17 	ldw	r2,-12(fp)
     e40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     e44:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
     e48:	0001883a 	nop
}
     e4c:	e037883a 	mov	sp,fp
     e50:	df000017 	ldw	fp,0(sp)
     e54:	dec00104 	addi	sp,sp,4
     e58:	f800283a 	ret

00000e5c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
     e5c:	defff904 	addi	sp,sp,-28
     e60:	df000615 	stw	fp,24(sp)
     e64:	df000604 	addi	fp,sp,24
     e68:	e13ffe15 	stw	r4,-8(fp)
     e6c:	e17fff15 	stw	r5,-4(fp)
     e70:	e0bfff17 	ldw	r2,-4(fp)
     e74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     e78:	0005303a 	rdctl	r2,status
     e7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     e80:	e0fffb17 	ldw	r3,-20(fp)
     e84:	00bfff84 	movi	r2,-2
     e88:	1884703a 	and	r2,r3,r2
     e8c:	1001703a 	wrctl	status,r2
  
  return context;
     e90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     e94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
     e98:	00c00044 	movi	r3,1
     e9c:	e0bffa17 	ldw	r2,-24(fp)
     ea0:	1884983a 	sll	r2,r3,r2
     ea4:	0084303a 	nor	r2,zero,r2
     ea8:	1007883a 	mov	r3,r2
     eac:	d0a0c617 	ldw	r2,-31976(gp)
     eb0:	1884703a 	and	r2,r3,r2
     eb4:	d0a0c615 	stw	r2,-31976(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     eb8:	d0a0c617 	ldw	r2,-31976(gp)
     ebc:	100170fa 	wrctl	ienable,r2
     ec0:	e0bffc17 	ldw	r2,-16(fp)
     ec4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     ec8:	e0bffd17 	ldw	r2,-12(fp)
     ecc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     ed0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
     ed4:	0001883a 	nop
}
     ed8:	e037883a 	mov	sp,fp
     edc:	df000017 	ldw	fp,0(sp)
     ee0:	dec00104 	addi	sp,sp,4
     ee4:	f800283a 	ret

00000ee8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
     ee8:	defffc04 	addi	sp,sp,-16
     eec:	df000315 	stw	fp,12(sp)
     ef0:	df000304 	addi	fp,sp,12
     ef4:	e13ffe15 	stw	r4,-8(fp)
     ef8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
     efc:	000530fa 	rdctl	r2,ienable
     f00:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
     f04:	00c00044 	movi	r3,1
     f08:	e0bfff17 	ldw	r2,-4(fp)
     f0c:	1884983a 	sll	r2,r3,r2
     f10:	1007883a 	mov	r3,r2
     f14:	e0bffd17 	ldw	r2,-12(fp)
     f18:	1884703a 	and	r2,r3,r2
     f1c:	1004c03a 	cmpne	r2,r2,zero
     f20:	10803fcc 	andi	r2,r2,255
}
     f24:	e037883a 	mov	sp,fp
     f28:	df000017 	ldw	fp,0(sp)
     f2c:	dec00104 	addi	sp,sp,4
     f30:	f800283a 	ret

00000f34 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     f34:	defff504 	addi	sp,sp,-44
     f38:	dfc00a15 	stw	ra,40(sp)
     f3c:	df000915 	stw	fp,36(sp)
     f40:	df000904 	addi	fp,sp,36
     f44:	e13ffc15 	stw	r4,-16(fp)
     f48:	e17ffd15 	stw	r5,-12(fp)
     f4c:	e1bffe15 	stw	r6,-8(fp)
     f50:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
     f54:	00bffa84 	movi	r2,-22
     f58:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
     f5c:	e0bffd17 	ldw	r2,-12(fp)
     f60:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
     f64:	e0bff817 	ldw	r2,-32(fp)
     f68:	10800808 	cmpgei	r2,r2,32
     f6c:	1000271e 	bne	r2,zero,100c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     f70:	0005303a 	rdctl	r2,status
     f74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     f78:	e0fffb17 	ldw	r3,-20(fp)
     f7c:	00bfff84 	movi	r2,-2
     f80:	1884703a 	and	r2,r3,r2
     f84:	1001703a 	wrctl	status,r2
  
  return context;
     f88:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
     f8c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
     f90:	00800034 	movhi	r2,0
     f94:	10893404 	addi	r2,r2,9424
     f98:	e0fff817 	ldw	r3,-32(fp)
     f9c:	180690fa 	slli	r3,r3,3
     fa0:	10c5883a 	add	r2,r2,r3
     fa4:	e0fffe17 	ldw	r3,-8(fp)
     fa8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
     fac:	00800034 	movhi	r2,0
     fb0:	10893404 	addi	r2,r2,9424
     fb4:	e0fff817 	ldw	r3,-32(fp)
     fb8:	180690fa 	slli	r3,r3,3
     fbc:	10c5883a 	add	r2,r2,r3
     fc0:	10800104 	addi	r2,r2,4
     fc4:	e0ffff17 	ldw	r3,-4(fp)
     fc8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
     fcc:	e0bffe17 	ldw	r2,-8(fp)
     fd0:	10000526 	beq	r2,zero,fe8 <alt_iic_isr_register+0xb4>
     fd4:	e0bff817 	ldw	r2,-32(fp)
     fd8:	100b883a 	mov	r5,r2
     fdc:	e13ffc17 	ldw	r4,-16(fp)
     fe0:	0000dd40 	call	dd4 <alt_ic_irq_enable>
     fe4:	00000406 	br	ff8 <alt_iic_isr_register+0xc4>
     fe8:	e0bff817 	ldw	r2,-32(fp)
     fec:	100b883a 	mov	r5,r2
     ff0:	e13ffc17 	ldw	r4,-16(fp)
     ff4:	0000e5c0 	call	e5c <alt_ic_irq_disable>
     ff8:	e0bff715 	stw	r2,-36(fp)
     ffc:	e0bffa17 	ldw	r2,-24(fp)
    1000:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1004:	e0bff917 	ldw	r2,-28(fp)
    1008:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    100c:	e0bff717 	ldw	r2,-36(fp)
}
    1010:	e037883a 	mov	sp,fp
    1014:	dfc00117 	ldw	ra,4(sp)
    1018:	df000017 	ldw	fp,0(sp)
    101c:	dec00204 	addi	sp,sp,8
    1020:	f800283a 	ret

00001024 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1024:	defff804 	addi	sp,sp,-32
    1028:	dfc00715 	stw	ra,28(sp)
    102c:	df000615 	stw	fp,24(sp)
    1030:	dc000515 	stw	r16,20(sp)
    1034:	df000604 	addi	fp,sp,24
    1038:	e13ffb15 	stw	r4,-20(fp)
    103c:	e17ffc15 	stw	r5,-16(fp)
    1040:	e1bffd15 	stw	r6,-12(fp)
    1044:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    1048:	e1bffe17 	ldw	r6,-8(fp)
    104c:	e17ffd17 	ldw	r5,-12(fp)
    1050:	e13ffc17 	ldw	r4,-16(fp)
    1054:	00012ac0 	call	12ac <open>
    1058:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    105c:	e0bffa17 	ldw	r2,-24(fp)
    1060:	10002216 	blt	r2,zero,10ec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    1064:	04000034 	movhi	r16,0
    1068:	8407d104 	addi	r16,r16,8004
    106c:	e0bffa17 	ldw	r2,-24(fp)
    1070:	01400304 	movi	r5,12
    1074:	1009883a 	mov	r4,r2
    1078:	0001e680 	call	1e68 <__mulsi3>
    107c:	8085883a 	add	r2,r16,r2
    1080:	10c00017 	ldw	r3,0(r2)
    1084:	e0bffb17 	ldw	r2,-20(fp)
    1088:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    108c:	04000034 	movhi	r16,0
    1090:	8407d104 	addi	r16,r16,8004
    1094:	e0bffa17 	ldw	r2,-24(fp)
    1098:	01400304 	movi	r5,12
    109c:	1009883a 	mov	r4,r2
    10a0:	0001e680 	call	1e68 <__mulsi3>
    10a4:	8085883a 	add	r2,r16,r2
    10a8:	10800104 	addi	r2,r2,4
    10ac:	10c00017 	ldw	r3,0(r2)
    10b0:	e0bffb17 	ldw	r2,-20(fp)
    10b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    10b8:	04000034 	movhi	r16,0
    10bc:	8407d104 	addi	r16,r16,8004
    10c0:	e0bffa17 	ldw	r2,-24(fp)
    10c4:	01400304 	movi	r5,12
    10c8:	1009883a 	mov	r4,r2
    10cc:	0001e680 	call	1e68 <__mulsi3>
    10d0:	8085883a 	add	r2,r16,r2
    10d4:	10800204 	addi	r2,r2,8
    10d8:	10c00017 	ldw	r3,0(r2)
    10dc:	e0bffb17 	ldw	r2,-20(fp)
    10e0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    10e4:	e13ffa17 	ldw	r4,-24(fp)
    10e8:	00014080 	call	1408 <alt_release_fd>
  }
} 
    10ec:	0001883a 	nop
    10f0:	e6ffff04 	addi	sp,fp,-4
    10f4:	dfc00217 	ldw	ra,8(sp)
    10f8:	df000117 	ldw	fp,4(sp)
    10fc:	dc000017 	ldw	r16,0(sp)
    1100:	dec00304 	addi	sp,sp,12
    1104:	f800283a 	ret

00001108 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1108:	defffb04 	addi	sp,sp,-20
    110c:	dfc00415 	stw	ra,16(sp)
    1110:	df000315 	stw	fp,12(sp)
    1114:	df000304 	addi	fp,sp,12
    1118:	e13ffd15 	stw	r4,-12(fp)
    111c:	e17ffe15 	stw	r5,-8(fp)
    1120:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1124:	01c07fc4 	movi	r7,511
    1128:	01800044 	movi	r6,1
    112c:	e17ffd17 	ldw	r5,-12(fp)
    1130:	01000034 	movhi	r4,0
    1134:	2107d404 	addi	r4,r4,8016
    1138:	00010240 	call	1024 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    113c:	01c07fc4 	movi	r7,511
    1140:	000d883a 	mov	r6,zero
    1144:	e17ffe17 	ldw	r5,-8(fp)
    1148:	01000034 	movhi	r4,0
    114c:	2107d104 	addi	r4,r4,8004
    1150:	00010240 	call	1024 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1154:	01c07fc4 	movi	r7,511
    1158:	01800044 	movi	r6,1
    115c:	e17fff17 	ldw	r5,-4(fp)
    1160:	01000034 	movhi	r4,0
    1164:	2107d704 	addi	r4,r4,8028
    1168:	00010240 	call	1024 <alt_open_fd>
}  
    116c:	0001883a 	nop
    1170:	e037883a 	mov	sp,fp
    1174:	dfc00117 	ldw	ra,4(sp)
    1178:	df000017 	ldw	fp,0(sp)
    117c:	dec00204 	addi	sp,sp,8
    1180:	f800283a 	ret

00001184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1184:	defffe04 	addi	sp,sp,-8
    1188:	dfc00115 	stw	ra,4(sp)
    118c:	df000015 	stw	fp,0(sp)
    1190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1194:	d0a00517 	ldw	r2,-32748(gp)
    1198:	10000326 	beq	r2,zero,11a8 <alt_get_errno+0x24>
    119c:	d0a00517 	ldw	r2,-32748(gp)
    11a0:	103ee83a 	callr	r2
    11a4:	00000106 	br	11ac <alt_get_errno+0x28>
    11a8:	d0a0ca04 	addi	r2,gp,-31960
}
    11ac:	e037883a 	mov	sp,fp
    11b0:	dfc00117 	ldw	ra,4(sp)
    11b4:	df000017 	ldw	fp,0(sp)
    11b8:	dec00204 	addi	sp,sp,8
    11bc:	f800283a 	ret

000011c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    11c0:	defffb04 	addi	sp,sp,-20
    11c4:	dfc00415 	stw	ra,16(sp)
    11c8:	df000315 	stw	fp,12(sp)
    11cc:	dc000215 	stw	r16,8(sp)
    11d0:	df000304 	addi	fp,sp,12
    11d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    11d8:	e0bffe17 	ldw	r2,-8(fp)
    11dc:	10800217 	ldw	r2,8(r2)
    11e0:	10d00034 	orhi	r3,r2,16384
    11e4:	e0bffe17 	ldw	r2,-8(fp)
    11e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    11ec:	e03ffd15 	stw	zero,-12(fp)
    11f0:	00002306 	br	1280 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    11f4:	04000034 	movhi	r16,0
    11f8:	8407d104 	addi	r16,r16,8004
    11fc:	e0bffd17 	ldw	r2,-12(fp)
    1200:	01400304 	movi	r5,12
    1204:	1009883a 	mov	r4,r2
    1208:	0001e680 	call	1e68 <__mulsi3>
    120c:	8085883a 	add	r2,r16,r2
    1210:	10c00017 	ldw	r3,0(r2)
    1214:	e0bffe17 	ldw	r2,-8(fp)
    1218:	10800017 	ldw	r2,0(r2)
    121c:	1880151e 	bne	r3,r2,1274 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1220:	04000034 	movhi	r16,0
    1224:	8407d104 	addi	r16,r16,8004
    1228:	e0bffd17 	ldw	r2,-12(fp)
    122c:	01400304 	movi	r5,12
    1230:	1009883a 	mov	r4,r2
    1234:	0001e680 	call	1e68 <__mulsi3>
    1238:	8085883a 	add	r2,r16,r2
    123c:	10800204 	addi	r2,r2,8
    1240:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1244:	10000b0e 	bge	r2,zero,1274 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    1248:	01400304 	movi	r5,12
    124c:	e13ffd17 	ldw	r4,-12(fp)
    1250:	0001e680 	call	1e68 <__mulsi3>
    1254:	1007883a 	mov	r3,r2
    1258:	00800034 	movhi	r2,0
    125c:	1087d104 	addi	r2,r2,8004
    1260:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1264:	e0bffe17 	ldw	r2,-8(fp)
    1268:	18800226 	beq	r3,r2,1274 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    126c:	00bffcc4 	movi	r2,-13
    1270:	00000806 	br	1294 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1274:	e0bffd17 	ldw	r2,-12(fp)
    1278:	10800044 	addi	r2,r2,1
    127c:	e0bffd15 	stw	r2,-12(fp)
    1280:	d0a00417 	ldw	r2,-32752(gp)
    1284:	1007883a 	mov	r3,r2
    1288:	e0bffd17 	ldw	r2,-12(fp)
    128c:	18bfd92e 	bgeu	r3,r2,11f4 <_gp+0xffff7050>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    1290:	0005883a 	mov	r2,zero
}
    1294:	e6ffff04 	addi	sp,fp,-4
    1298:	dfc00217 	ldw	ra,8(sp)
    129c:	df000117 	ldw	fp,4(sp)
    12a0:	dc000017 	ldw	r16,0(sp)
    12a4:	dec00304 	addi	sp,sp,12
    12a8:	f800283a 	ret

000012ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    12ac:	defff604 	addi	sp,sp,-40
    12b0:	dfc00915 	stw	ra,36(sp)
    12b4:	df000815 	stw	fp,32(sp)
    12b8:	df000804 	addi	fp,sp,32
    12bc:	e13ffd15 	stw	r4,-12(fp)
    12c0:	e17ffe15 	stw	r5,-8(fp)
    12c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    12c8:	00bfffc4 	movi	r2,-1
    12cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    12d0:	00bffb44 	movi	r2,-19
    12d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    12d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    12dc:	d1600204 	addi	r5,gp,-32760
    12e0:	e13ffd17 	ldw	r4,-12(fp)
    12e4:	00016540 	call	1654 <alt_find_dev>
    12e8:	e0bff815 	stw	r2,-32(fp)
    12ec:	e0bff817 	ldw	r2,-32(fp)
    12f0:	1000051e 	bne	r2,zero,1308 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    12f4:	e13ffd17 	ldw	r4,-12(fp)
    12f8:	00016e40 	call	16e4 <alt_find_file>
    12fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    1300:	00800044 	movi	r2,1
    1304:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1308:	e0bff817 	ldw	r2,-32(fp)
    130c:	10002b26 	beq	r2,zero,13bc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    1310:	e13ff817 	ldw	r4,-32(fp)
    1314:	00017ec0 	call	17ec <alt_get_fd>
    1318:	e0bff915 	stw	r2,-28(fp)
    131c:	e0bff917 	ldw	r2,-28(fp)
    1320:	1000030e 	bge	r2,zero,1330 <open+0x84>
    {
      status = index;
    1324:	e0bff917 	ldw	r2,-28(fp)
    1328:	e0bffa15 	stw	r2,-24(fp)
    132c:	00002506 	br	13c4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    1330:	01400304 	movi	r5,12
    1334:	e13ff917 	ldw	r4,-28(fp)
    1338:	0001e680 	call	1e68 <__mulsi3>
    133c:	1007883a 	mov	r3,r2
    1340:	00800034 	movhi	r2,0
    1344:	1087d104 	addi	r2,r2,8004
    1348:	1885883a 	add	r2,r3,r2
    134c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1350:	e0fffe17 	ldw	r3,-8(fp)
    1354:	00900034 	movhi	r2,16384
    1358:	10bfffc4 	addi	r2,r2,-1
    135c:	1886703a 	and	r3,r3,r2
    1360:	e0bffc17 	ldw	r2,-16(fp)
    1364:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1368:	e0bffb17 	ldw	r2,-20(fp)
    136c:	1000051e 	bne	r2,zero,1384 <open+0xd8>
    1370:	e13ffc17 	ldw	r4,-16(fp)
    1374:	00011c00 	call	11c0 <alt_file_locked>
    1378:	e0bffa15 	stw	r2,-24(fp)
    137c:	e0bffa17 	ldw	r2,-24(fp)
    1380:	10001016 	blt	r2,zero,13c4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1384:	e0bff817 	ldw	r2,-32(fp)
    1388:	10800317 	ldw	r2,12(r2)
    138c:	10000826 	beq	r2,zero,13b0 <open+0x104>
    1390:	e0bff817 	ldw	r2,-32(fp)
    1394:	10800317 	ldw	r2,12(r2)
    1398:	e1ffff17 	ldw	r7,-4(fp)
    139c:	e1bffe17 	ldw	r6,-8(fp)
    13a0:	e17ffd17 	ldw	r5,-12(fp)
    13a4:	e13ffc17 	ldw	r4,-16(fp)
    13a8:	103ee83a 	callr	r2
    13ac:	00000106 	br	13b4 <open+0x108>
    13b0:	0005883a 	mov	r2,zero
    13b4:	e0bffa15 	stw	r2,-24(fp)
    13b8:	00000206 	br	13c4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    13bc:	00bffb44 	movi	r2,-19
    13c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    13c4:	e0bffa17 	ldw	r2,-24(fp)
    13c8:	1000090e 	bge	r2,zero,13f0 <open+0x144>
  {
    alt_release_fd (index);  
    13cc:	e13ff917 	ldw	r4,-28(fp)
    13d0:	00014080 	call	1408 <alt_release_fd>
    ALT_ERRNO = -status;
    13d4:	00011840 	call	1184 <alt_get_errno>
    13d8:	1007883a 	mov	r3,r2
    13dc:	e0bffa17 	ldw	r2,-24(fp)
    13e0:	0085c83a 	sub	r2,zero,r2
    13e4:	18800015 	stw	r2,0(r3)
    return -1;
    13e8:	00bfffc4 	movi	r2,-1
    13ec:	00000106 	br	13f4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    13f0:	e0bff917 	ldw	r2,-28(fp)
}
    13f4:	e037883a 	mov	sp,fp
    13f8:	dfc00117 	ldw	ra,4(sp)
    13fc:	df000017 	ldw	fp,0(sp)
    1400:	dec00204 	addi	sp,sp,8
    1404:	f800283a 	ret

00001408 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1408:	defffc04 	addi	sp,sp,-16
    140c:	dfc00315 	stw	ra,12(sp)
    1410:	df000215 	stw	fp,8(sp)
    1414:	dc000115 	stw	r16,4(sp)
    1418:	df000204 	addi	fp,sp,8
    141c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    1420:	e0bffe17 	ldw	r2,-8(fp)
    1424:	108000d0 	cmplti	r2,r2,3
    1428:	1000111e 	bne	r2,zero,1470 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    142c:	04000034 	movhi	r16,0
    1430:	8407d104 	addi	r16,r16,8004
    1434:	e0bffe17 	ldw	r2,-8(fp)
    1438:	01400304 	movi	r5,12
    143c:	1009883a 	mov	r4,r2
    1440:	0001e680 	call	1e68 <__mulsi3>
    1444:	8085883a 	add	r2,r16,r2
    1448:	10800204 	addi	r2,r2,8
    144c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    1450:	04000034 	movhi	r16,0
    1454:	8407d104 	addi	r16,r16,8004
    1458:	e0bffe17 	ldw	r2,-8(fp)
    145c:	01400304 	movi	r5,12
    1460:	1009883a 	mov	r4,r2
    1464:	0001e680 	call	1e68 <__mulsi3>
    1468:	8085883a 	add	r2,r16,r2
    146c:	10000015 	stw	zero,0(r2)
  }
}
    1470:	0001883a 	nop
    1474:	e6ffff04 	addi	sp,fp,-4
    1478:	dfc00217 	ldw	ra,8(sp)
    147c:	df000117 	ldw	fp,4(sp)
    1480:	dc000017 	ldw	r16,0(sp)
    1484:	dec00304 	addi	sp,sp,12
    1488:	f800283a 	ret

0000148c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    148c:	defffa04 	addi	sp,sp,-24
    1490:	df000515 	stw	fp,20(sp)
    1494:	df000504 	addi	fp,sp,20
    1498:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    149c:	0005303a 	rdctl	r2,status
    14a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    14a4:	e0fffc17 	ldw	r3,-16(fp)
    14a8:	00bfff84 	movi	r2,-2
    14ac:	1884703a 	and	r2,r3,r2
    14b0:	1001703a 	wrctl	status,r2
  
  return context;
    14b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    14b8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    14bc:	e0bfff17 	ldw	r2,-4(fp)
    14c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    14c4:	e0bffd17 	ldw	r2,-12(fp)
    14c8:	10800017 	ldw	r2,0(r2)
    14cc:	e0fffd17 	ldw	r3,-12(fp)
    14d0:	18c00117 	ldw	r3,4(r3)
    14d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    14d8:	e0bffd17 	ldw	r2,-12(fp)
    14dc:	10800117 	ldw	r2,4(r2)
    14e0:	e0fffd17 	ldw	r3,-12(fp)
    14e4:	18c00017 	ldw	r3,0(r3)
    14e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    14ec:	e0bffd17 	ldw	r2,-12(fp)
    14f0:	e0fffd17 	ldw	r3,-12(fp)
    14f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    14f8:	e0bffd17 	ldw	r2,-12(fp)
    14fc:	e0fffd17 	ldw	r3,-12(fp)
    1500:	10c00015 	stw	r3,0(r2)
    1504:	e0bffb17 	ldw	r2,-20(fp)
    1508:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    150c:	e0bffe17 	ldw	r2,-8(fp)
    1510:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    1514:	0001883a 	nop
    1518:	e037883a 	mov	sp,fp
    151c:	df000017 	ldw	fp,0(sp)
    1520:	dec00104 	addi	sp,sp,4
    1524:	f800283a 	ret

00001528 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1528:	defffb04 	addi	sp,sp,-20
    152c:	dfc00415 	stw	ra,16(sp)
    1530:	df000315 	stw	fp,12(sp)
    1534:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1538:	d0a00717 	ldw	r2,-32740(gp)
    153c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1540:	d0a0c817 	ldw	r2,-31968(gp)
    1544:	10800044 	addi	r2,r2,1
    1548:	d0a0c815 	stw	r2,-31968(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    154c:	00002e06 	br	1608 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    1550:	e0bffd17 	ldw	r2,-12(fp)
    1554:	10800017 	ldw	r2,0(r2)
    1558:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    155c:	e0bffd17 	ldw	r2,-12(fp)
    1560:	10800403 	ldbu	r2,16(r2)
    1564:	10803fcc 	andi	r2,r2,255
    1568:	10000426 	beq	r2,zero,157c <alt_tick+0x54>
    156c:	d0a0c817 	ldw	r2,-31968(gp)
    1570:	1000021e 	bne	r2,zero,157c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    1574:	e0bffd17 	ldw	r2,-12(fp)
    1578:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    157c:	e0bffd17 	ldw	r2,-12(fp)
    1580:	10800217 	ldw	r2,8(r2)
    1584:	d0e0c817 	ldw	r3,-31968(gp)
    1588:	18801d36 	bltu	r3,r2,1600 <alt_tick+0xd8>
    158c:	e0bffd17 	ldw	r2,-12(fp)
    1590:	10800403 	ldbu	r2,16(r2)
    1594:	10803fcc 	andi	r2,r2,255
    1598:	1000191e 	bne	r2,zero,1600 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    159c:	e0bffd17 	ldw	r2,-12(fp)
    15a0:	10800317 	ldw	r2,12(r2)
    15a4:	e0fffd17 	ldw	r3,-12(fp)
    15a8:	18c00517 	ldw	r3,20(r3)
    15ac:	1809883a 	mov	r4,r3
    15b0:	103ee83a 	callr	r2
    15b4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    15b8:	e0bfff17 	ldw	r2,-4(fp)
    15bc:	1000031e 	bne	r2,zero,15cc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    15c0:	e13ffd17 	ldw	r4,-12(fp)
    15c4:	000148c0 	call	148c <alt_alarm_stop>
    15c8:	00000d06 	br	1600 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    15cc:	e0bffd17 	ldw	r2,-12(fp)
    15d0:	10c00217 	ldw	r3,8(r2)
    15d4:	e0bfff17 	ldw	r2,-4(fp)
    15d8:	1887883a 	add	r3,r3,r2
    15dc:	e0bffd17 	ldw	r2,-12(fp)
    15e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    15e4:	e0bffd17 	ldw	r2,-12(fp)
    15e8:	10c00217 	ldw	r3,8(r2)
    15ec:	d0a0c817 	ldw	r2,-31968(gp)
    15f0:	1880032e 	bgeu	r3,r2,1600 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    15f4:	e0bffd17 	ldw	r2,-12(fp)
    15f8:	00c00044 	movi	r3,1
    15fc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    1600:	e0bffe17 	ldw	r2,-8(fp)
    1604:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1608:	e0fffd17 	ldw	r3,-12(fp)
    160c:	d0a00704 	addi	r2,gp,-32740
    1610:	18bfcf1e 	bne	r3,r2,1550 <_gp+0xffff73ac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    1614:	0001883a 	nop
}
    1618:	0001883a 	nop
    161c:	e037883a 	mov	sp,fp
    1620:	dfc00117 	ldw	ra,4(sp)
    1624:	df000017 	ldw	fp,0(sp)
    1628:	dec00204 	addi	sp,sp,8
    162c:	f800283a 	ret

00001630 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    1630:	deffff04 	addi	sp,sp,-4
    1634:	df000015 	stw	fp,0(sp)
    1638:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    163c:	000170fa 	wrctl	ienable,zero
}
    1640:	0001883a 	nop
    1644:	e037883a 	mov	sp,fp
    1648:	df000017 	ldw	fp,0(sp)
    164c:	dec00104 	addi	sp,sp,4
    1650:	f800283a 	ret

00001654 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1654:	defffa04 	addi	sp,sp,-24
    1658:	dfc00515 	stw	ra,20(sp)
    165c:	df000415 	stw	fp,16(sp)
    1660:	df000404 	addi	fp,sp,16
    1664:	e13ffe15 	stw	r4,-8(fp)
    1668:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    166c:	e0bfff17 	ldw	r2,-4(fp)
    1670:	10800017 	ldw	r2,0(r2)
    1674:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    1678:	e13ffe17 	ldw	r4,-8(fp)
    167c:	00019b00 	call	19b0 <strlen>
    1680:	10800044 	addi	r2,r2,1
    1684:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1688:	00000d06 	br	16c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    168c:	e0bffc17 	ldw	r2,-16(fp)
    1690:	10800217 	ldw	r2,8(r2)
    1694:	e0fffd17 	ldw	r3,-12(fp)
    1698:	180d883a 	mov	r6,r3
    169c:	e17ffe17 	ldw	r5,-8(fp)
    16a0:	1009883a 	mov	r4,r2
    16a4:	00019800 	call	1980 <memcmp>
    16a8:	1000021e 	bne	r2,zero,16b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    16ac:	e0bffc17 	ldw	r2,-16(fp)
    16b0:	00000706 	br	16d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    16b4:	e0bffc17 	ldw	r2,-16(fp)
    16b8:	10800017 	ldw	r2,0(r2)
    16bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    16c0:	e0fffc17 	ldw	r3,-16(fp)
    16c4:	e0bfff17 	ldw	r2,-4(fp)
    16c8:	18bff01e 	bne	r3,r2,168c <_gp+0xffff74e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    16cc:	0005883a 	mov	r2,zero
}
    16d0:	e037883a 	mov	sp,fp
    16d4:	dfc00117 	ldw	ra,4(sp)
    16d8:	df000017 	ldw	fp,0(sp)
    16dc:	dec00204 	addi	sp,sp,8
    16e0:	f800283a 	ret

000016e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    16e4:	defffb04 	addi	sp,sp,-20
    16e8:	dfc00415 	stw	ra,16(sp)
    16ec:	df000315 	stw	fp,12(sp)
    16f0:	df000304 	addi	fp,sp,12
    16f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    16f8:	d0a00017 	ldw	r2,-32768(gp)
    16fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1700:	00003106 	br	17c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    1704:	e0bffd17 	ldw	r2,-12(fp)
    1708:	10800217 	ldw	r2,8(r2)
    170c:	1009883a 	mov	r4,r2
    1710:	00019b00 	call	19b0 <strlen>
    1714:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    1718:	e0bffd17 	ldw	r2,-12(fp)
    171c:	10c00217 	ldw	r3,8(r2)
    1720:	e0bffe17 	ldw	r2,-8(fp)
    1724:	10bfffc4 	addi	r2,r2,-1
    1728:	1885883a 	add	r2,r3,r2
    172c:	10800003 	ldbu	r2,0(r2)
    1730:	10803fcc 	andi	r2,r2,255
    1734:	1080201c 	xori	r2,r2,128
    1738:	10bfe004 	addi	r2,r2,-128
    173c:	10800bd8 	cmpnei	r2,r2,47
    1740:	1000031e 	bne	r2,zero,1750 <alt_find_file+0x6c>
    {
      len -= 1;
    1744:	e0bffe17 	ldw	r2,-8(fp)
    1748:	10bfffc4 	addi	r2,r2,-1
    174c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1750:	e0bffe17 	ldw	r2,-8(fp)
    1754:	e0ffff17 	ldw	r3,-4(fp)
    1758:	1885883a 	add	r2,r3,r2
    175c:	10800003 	ldbu	r2,0(r2)
    1760:	10803fcc 	andi	r2,r2,255
    1764:	1080201c 	xori	r2,r2,128
    1768:	10bfe004 	addi	r2,r2,-128
    176c:	10800be0 	cmpeqi	r2,r2,47
    1770:	1000081e 	bne	r2,zero,1794 <alt_find_file+0xb0>
    1774:	e0bffe17 	ldw	r2,-8(fp)
    1778:	e0ffff17 	ldw	r3,-4(fp)
    177c:	1885883a 	add	r2,r3,r2
    1780:	10800003 	ldbu	r2,0(r2)
    1784:	10803fcc 	andi	r2,r2,255
    1788:	1080201c 	xori	r2,r2,128
    178c:	10bfe004 	addi	r2,r2,-128
    1790:	10000a1e 	bne	r2,zero,17bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    1794:	e0bffd17 	ldw	r2,-12(fp)
    1798:	10800217 	ldw	r2,8(r2)
    179c:	e0fffe17 	ldw	r3,-8(fp)
    17a0:	180d883a 	mov	r6,r3
    17a4:	e17fff17 	ldw	r5,-4(fp)
    17a8:	1009883a 	mov	r4,r2
    17ac:	00019800 	call	1980 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    17b0:	1000021e 	bne	r2,zero,17bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    17b4:	e0bffd17 	ldw	r2,-12(fp)
    17b8:	00000706 	br	17d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    17bc:	e0bffd17 	ldw	r2,-12(fp)
    17c0:	10800017 	ldw	r2,0(r2)
    17c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    17c8:	e0fffd17 	ldw	r3,-12(fp)
    17cc:	d0a00004 	addi	r2,gp,-32768
    17d0:	18bfcc1e 	bne	r3,r2,1704 <_gp+0xffff7560>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    17d4:	0005883a 	mov	r2,zero
}
    17d8:	e037883a 	mov	sp,fp
    17dc:	dfc00117 	ldw	ra,4(sp)
    17e0:	df000017 	ldw	fp,0(sp)
    17e4:	dec00204 	addi	sp,sp,8
    17e8:	f800283a 	ret

000017ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    17ec:	defffa04 	addi	sp,sp,-24
    17f0:	dfc00515 	stw	ra,20(sp)
    17f4:	df000415 	stw	fp,16(sp)
    17f8:	dc000315 	stw	r16,12(sp)
    17fc:	df000404 	addi	fp,sp,16
    1800:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    1804:	00bffa04 	movi	r2,-24
    1808:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    180c:	e03ffc15 	stw	zero,-16(fp)
    1810:	00001d06 	br	1888 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    1814:	04000034 	movhi	r16,0
    1818:	8407d104 	addi	r16,r16,8004
    181c:	e0bffc17 	ldw	r2,-16(fp)
    1820:	01400304 	movi	r5,12
    1824:	1009883a 	mov	r4,r2
    1828:	0001e680 	call	1e68 <__mulsi3>
    182c:	8085883a 	add	r2,r16,r2
    1830:	10800017 	ldw	r2,0(r2)
    1834:	1000111e 	bne	r2,zero,187c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    1838:	04000034 	movhi	r16,0
    183c:	8407d104 	addi	r16,r16,8004
    1840:	e0bffc17 	ldw	r2,-16(fp)
    1844:	01400304 	movi	r5,12
    1848:	1009883a 	mov	r4,r2
    184c:	0001e680 	call	1e68 <__mulsi3>
    1850:	8085883a 	add	r2,r16,r2
    1854:	e0fffe17 	ldw	r3,-8(fp)
    1858:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    185c:	d0e00417 	ldw	r3,-32752(gp)
    1860:	e0bffc17 	ldw	r2,-16(fp)
    1864:	1880020e 	bge	r3,r2,1870 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    1868:	e0bffc17 	ldw	r2,-16(fp)
    186c:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
    1870:	e0bffc17 	ldw	r2,-16(fp)
    1874:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    1878:	00000606 	br	1894 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    187c:	e0bffc17 	ldw	r2,-16(fp)
    1880:	10800044 	addi	r2,r2,1
    1884:	e0bffc15 	stw	r2,-16(fp)
    1888:	e0bffc17 	ldw	r2,-16(fp)
    188c:	10800810 	cmplti	r2,r2,32
    1890:	103fe01e 	bne	r2,zero,1814 <_gp+0xffff7670>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    1894:	e0bffd17 	ldw	r2,-12(fp)
}
    1898:	e6ffff04 	addi	sp,fp,-4
    189c:	dfc00217 	ldw	ra,8(sp)
    18a0:	df000117 	ldw	fp,4(sp)
    18a4:	dc000017 	ldw	r16,0(sp)
    18a8:	dec00304 	addi	sp,sp,12
    18ac:	f800283a 	ret

000018b0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    18b0:	defffe04 	addi	sp,sp,-8
    18b4:	df000115 	stw	fp,4(sp)
    18b8:	df000104 	addi	fp,sp,4
    18bc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    18c0:	e0bfff17 	ldw	r2,-4(fp)
    18c4:	10bffe84 	addi	r2,r2,-6
    18c8:	10c00428 	cmpgeui	r3,r2,16
    18cc:	18001a1e 	bne	r3,zero,1938 <alt_exception_cause_generated_bad_addr+0x88>
    18d0:	100690ba 	slli	r3,r2,2
    18d4:	00800034 	movhi	r2,0
    18d8:	10863a04 	addi	r2,r2,6376
    18dc:	1885883a 	add	r2,r3,r2
    18e0:	10800017 	ldw	r2,0(r2)
    18e4:	1000683a 	jmp	r2
    18e8:	00001928 	cmpgeui	zero,zero,100
    18ec:	00001928 	cmpgeui	zero,zero,100
    18f0:	00001938 	rdprs	zero,zero,100
    18f4:	00001938 	rdprs	zero,zero,100
    18f8:	00001938 	rdprs	zero,zero,100
    18fc:	00001928 	cmpgeui	zero,zero,100
    1900:	00001930 	cmpltui	zero,zero,100
    1904:	00001938 	rdprs	zero,zero,100
    1908:	00001928 	cmpgeui	zero,zero,100
    190c:	00001928 	cmpgeui	zero,zero,100
    1910:	00001938 	rdprs	zero,zero,100
    1914:	00001928 	cmpgeui	zero,zero,100
    1918:	00001930 	cmpltui	zero,zero,100
    191c:	00001938 	rdprs	zero,zero,100
    1920:	00001938 	rdprs	zero,zero,100
    1924:	00001928 	cmpgeui	zero,zero,100
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    1928:	00800044 	movi	r2,1
    192c:	00000306 	br	193c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    1930:	0005883a 	mov	r2,zero
    1934:	00000106 	br	193c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    1938:	0005883a 	mov	r2,zero
  }
}
    193c:	e037883a 	mov	sp,fp
    1940:	df000017 	ldw	fp,0(sp)
    1944:	dec00104 	addi	sp,sp,4
    1948:	f800283a 	ret

0000194c <atexit>:
    194c:	200b883a 	mov	r5,r4
    1950:	000f883a 	mov	r7,zero
    1954:	000d883a 	mov	r6,zero
    1958:	0009883a 	mov	r4,zero
    195c:	00019cc1 	jmpi	19cc <__register_exitproc>

00001960 <exit>:
    1960:	defffe04 	addi	sp,sp,-8
    1964:	000b883a 	mov	r5,zero
    1968:	dc000015 	stw	r16,0(sp)
    196c:	dfc00115 	stw	ra,4(sp)
    1970:	2021883a 	mov	r16,r4
    1974:	0001b240 	call	1b24 <__call_exitprocs>
    1978:	8009883a 	mov	r4,r16
    197c:	0001e900 	call	1e90 <_exit>

00001980 <memcmp>:
    1980:	218d883a 	add	r6,r4,r6
    1984:	21800826 	beq	r4,r6,19a8 <memcmp+0x28>
    1988:	20800003 	ldbu	r2,0(r4)
    198c:	28c00003 	ldbu	r3,0(r5)
    1990:	10c00226 	beq	r2,r3,199c <memcmp+0x1c>
    1994:	10c5c83a 	sub	r2,r2,r3
    1998:	f800283a 	ret
    199c:	21000044 	addi	r4,r4,1
    19a0:	29400044 	addi	r5,r5,1
    19a4:	003ff706 	br	1984 <_gp+0xffff77e0>
    19a8:	0005883a 	mov	r2,zero
    19ac:	f800283a 	ret

000019b0 <strlen>:
    19b0:	2005883a 	mov	r2,r4
    19b4:	10c00007 	ldb	r3,0(r2)
    19b8:	18000226 	beq	r3,zero,19c4 <strlen+0x14>
    19bc:	10800044 	addi	r2,r2,1
    19c0:	003ffc06 	br	19b4 <_gp+0xffff7810>
    19c4:	1105c83a 	sub	r2,r2,r4
    19c8:	f800283a 	ret

000019cc <__register_exitproc>:
    19cc:	00800034 	movhi	r2,0
    19d0:	10887204 	addi	r2,r2,8648
    19d4:	10c00017 	ldw	r3,0(r2)
    19d8:	defff904 	addi	sp,sp,-28
    19dc:	dc000015 	stw	r16,0(sp)
    19e0:	1c000c17 	ldw	r16,48(r3)
    19e4:	dd400515 	stw	r21,20(sp)
    19e8:	dd000415 	stw	r20,16(sp)
    19ec:	dcc00315 	stw	r19,12(sp)
    19f0:	dc800215 	stw	r18,8(sp)
    19f4:	dc400115 	stw	r17,4(sp)
    19f8:	dfc00615 	stw	ra,24(sp)
    19fc:	202b883a 	mov	r21,r4
    1a00:	2823883a 	mov	r17,r5
    1a04:	3027883a 	mov	r19,r6
    1a08:	3825883a 	mov	r18,r7
    1a0c:	1029883a 	mov	r20,r2
    1a10:	8000021e 	bne	r16,zero,1a1c <__register_exitproc+0x50>
    1a14:	1c000d04 	addi	r16,r3,52
    1a18:	1c000c15 	stw	r16,48(r3)
    1a1c:	80800117 	ldw	r2,4(r16)
    1a20:	00c007c4 	movi	r3,31
    1a24:	1880110e 	bge	r3,r2,1a6c <__register_exitproc+0xa0>
    1a28:	00800034 	movhi	r2,0
    1a2c:	10800004 	addi	r2,r2,0
    1a30:	1000021e 	bne	r2,zero,1a3c <__register_exitproc+0x70>
    1a34:	00bfffc4 	movi	r2,-1
    1a38:	00003106 	br	1b00 <__register_exitproc+0x134>
    1a3c:	01002304 	movi	r4,140
    1a40:	00000000 	call	0 <__alt_mem_onchip_memory>
    1a44:	1021883a 	mov	r16,r2
    1a48:	103ffa26 	beq	r2,zero,1a34 <_gp+0xffff7890>
    1a4c:	10000115 	stw	zero,4(r2)
    1a50:	a0800017 	ldw	r2,0(r20)
    1a54:	10c00c17 	ldw	r3,48(r2)
    1a58:	80c00015 	stw	r3,0(r16)
    1a5c:	14000c15 	stw	r16,48(r2)
    1a60:	80002215 	stw	zero,136(r16)
    1a64:	a8001d26 	beq	r21,zero,1adc <__register_exitproc+0x110>
    1a68:	00000606 	br	1a84 <__register_exitproc+0xb8>
    1a6c:	a8001b26 	beq	r21,zero,1adc <__register_exitproc+0x110>
    1a70:	80802217 	ldw	r2,136(r16)
    1a74:	1000091e 	bne	r2,zero,1a9c <__register_exitproc+0xd0>
    1a78:	00800034 	movhi	r2,0
    1a7c:	10800004 	addi	r2,r2,0
    1a80:	103fec26 	beq	r2,zero,1a34 <_gp+0xffff7890>
    1a84:	01004204 	movi	r4,264
    1a88:	00000000 	call	0 <__alt_mem_onchip_memory>
    1a8c:	103fe926 	beq	r2,zero,1a34 <_gp+0xffff7890>
    1a90:	10004015 	stw	zero,256(r2)
    1a94:	10004115 	stw	zero,260(r2)
    1a98:	80802215 	stw	r2,136(r16)
    1a9c:	81400117 	ldw	r5,4(r16)
    1aa0:	01000044 	movi	r4,1
    1aa4:	2947883a 	add	r3,r5,r5
    1aa8:	18c7883a 	add	r3,r3,r3
    1aac:	10c7883a 	add	r3,r2,r3
    1ab0:	1cc00015 	stw	r19,0(r3)
    1ab4:	2148983a 	sll	r4,r4,r5
    1ab8:	11404017 	ldw	r5,256(r2)
    1abc:	290ab03a 	or	r5,r5,r4
    1ac0:	11404015 	stw	r5,256(r2)
    1ac4:	1c802015 	stw	r18,128(r3)
    1ac8:	00c00084 	movi	r3,2
    1acc:	a8c0031e 	bne	r21,r3,1adc <__register_exitproc+0x110>
    1ad0:	10c04117 	ldw	r3,260(r2)
    1ad4:	1908b03a 	or	r4,r3,r4
    1ad8:	11004115 	stw	r4,260(r2)
    1adc:	80800117 	ldw	r2,4(r16)
    1ae0:	10c00044 	addi	r3,r2,1
    1ae4:	10800084 	addi	r2,r2,2
    1ae8:	1085883a 	add	r2,r2,r2
    1aec:	1085883a 	add	r2,r2,r2
    1af0:	80c00115 	stw	r3,4(r16)
    1af4:	80a1883a 	add	r16,r16,r2
    1af8:	84400015 	stw	r17,0(r16)
    1afc:	0005883a 	mov	r2,zero
    1b00:	dfc00617 	ldw	ra,24(sp)
    1b04:	dd400517 	ldw	r21,20(sp)
    1b08:	dd000417 	ldw	r20,16(sp)
    1b0c:	dcc00317 	ldw	r19,12(sp)
    1b10:	dc800217 	ldw	r18,8(sp)
    1b14:	dc400117 	ldw	r17,4(sp)
    1b18:	dc000017 	ldw	r16,0(sp)
    1b1c:	dec00704 	addi	sp,sp,28
    1b20:	f800283a 	ret

00001b24 <__call_exitprocs>:
    1b24:	defff504 	addi	sp,sp,-44
    1b28:	dd000515 	stw	r20,20(sp)
    1b2c:	05000034 	movhi	r20,0
    1b30:	dc800315 	stw	r18,12(sp)
    1b34:	dfc00a15 	stw	ra,40(sp)
    1b38:	df000915 	stw	fp,36(sp)
    1b3c:	ddc00815 	stw	r23,32(sp)
    1b40:	dd800715 	stw	r22,28(sp)
    1b44:	dd400615 	stw	r21,24(sp)
    1b48:	dcc00415 	stw	r19,16(sp)
    1b4c:	dc400215 	stw	r17,8(sp)
    1b50:	dc000115 	stw	r16,4(sp)
    1b54:	d9000015 	stw	r4,0(sp)
    1b58:	2825883a 	mov	r18,r5
    1b5c:	a5087204 	addi	r20,r20,8648
    1b60:	a4400017 	ldw	r17,0(r20)
    1b64:	8cc00c17 	ldw	r19,48(r17)
    1b68:	8c400c04 	addi	r17,r17,48
    1b6c:	98004526 	beq	r19,zero,1c84 <__call_exitprocs+0x160>
    1b70:	9c000117 	ldw	r16,4(r19)
    1b74:	00900034 	movhi	r2,16384
    1b78:	10bfffc4 	addi	r2,r2,-1
    1b7c:	9d402217 	ldw	r21,136(r19)
    1b80:	85bfffc4 	addi	r22,r16,-1
    1b84:	80a1883a 	add	r16,r16,r2
    1b88:	8421883a 	add	r16,r16,r16
    1b8c:	8421883a 	add	r16,r16,r16
    1b90:	ac2f883a 	add	r23,r21,r16
    1b94:	84000204 	addi	r16,r16,8
    1b98:	9c21883a 	add	r16,r19,r16
    1b9c:	b0002716 	blt	r22,zero,1c3c <__call_exitprocs+0x118>
    1ba0:	90000726 	beq	r18,zero,1bc0 <__call_exitprocs+0x9c>
    1ba4:	a800041e 	bne	r21,zero,1bb8 <__call_exitprocs+0x94>
    1ba8:	b5bfffc4 	addi	r22,r22,-1
    1bac:	bdffff04 	addi	r23,r23,-4
    1bb0:	843fff04 	addi	r16,r16,-4
    1bb4:	003ff906 	br	1b9c <_gp+0xffff79f8>
    1bb8:	b9002017 	ldw	r4,128(r23)
    1bbc:	913ffa1e 	bne	r18,r4,1ba8 <_gp+0xffff7a04>
    1bc0:	99000117 	ldw	r4,4(r19)
    1bc4:	82000017 	ldw	r8,0(r16)
    1bc8:	213fffc4 	addi	r4,r4,-1
    1bcc:	b100021e 	bne	r22,r4,1bd8 <__call_exitprocs+0xb4>
    1bd0:	9d800115 	stw	r22,4(r19)
    1bd4:	00000106 	br	1bdc <__call_exitprocs+0xb8>
    1bd8:	80000015 	stw	zero,0(r16)
    1bdc:	403ff226 	beq	r8,zero,1ba8 <_gp+0xffff7a04>
    1be0:	9f000117 	ldw	fp,4(r19)
    1be4:	a8000526 	beq	r21,zero,1bfc <__call_exitprocs+0xd8>
    1be8:	00800044 	movi	r2,1
    1bec:	1592983a 	sll	r9,r2,r22
    1bf0:	a9404017 	ldw	r5,256(r21)
    1bf4:	494a703a 	and	r5,r9,r5
    1bf8:	2800021e 	bne	r5,zero,1c04 <__call_exitprocs+0xe0>
    1bfc:	403ee83a 	callr	r8
    1c00:	00000906 	br	1c28 <__call_exitprocs+0x104>
    1c04:	a9004117 	ldw	r4,260(r21)
    1c08:	4908703a 	and	r4,r9,r4
    1c0c:	2000041e 	bne	r4,zero,1c20 <__call_exitprocs+0xfc>
    1c10:	b9400017 	ldw	r5,0(r23)
    1c14:	d9000017 	ldw	r4,0(sp)
    1c18:	403ee83a 	callr	r8
    1c1c:	00000206 	br	1c28 <__call_exitprocs+0x104>
    1c20:	b9000017 	ldw	r4,0(r23)
    1c24:	403ee83a 	callr	r8
    1c28:	99000117 	ldw	r4,4(r19)
    1c2c:	e13fcc1e 	bne	fp,r4,1b60 <_gp+0xffff79bc>
    1c30:	89000017 	ldw	r4,0(r17)
    1c34:	993fdc26 	beq	r19,r4,1ba8 <_gp+0xffff7a04>
    1c38:	003fc906 	br	1b60 <_gp+0xffff79bc>
    1c3c:	00800034 	movhi	r2,0
    1c40:	10800004 	addi	r2,r2,0
    1c44:	10000f26 	beq	r2,zero,1c84 <__call_exitprocs+0x160>
    1c48:	99400117 	ldw	r5,4(r19)
    1c4c:	99000017 	ldw	r4,0(r19)
    1c50:	2800091e 	bne	r5,zero,1c78 <__call_exitprocs+0x154>
    1c54:	20000826 	beq	r4,zero,1c78 <__call_exitprocs+0x154>
    1c58:	89000015 	stw	r4,0(r17)
    1c5c:	a8000226 	beq	r21,zero,1c68 <__call_exitprocs+0x144>
    1c60:	a809883a 	mov	r4,r21
    1c64:	00000000 	call	0 <__alt_mem_onchip_memory>
    1c68:	9809883a 	mov	r4,r19
    1c6c:	00000000 	call	0 <__alt_mem_onchip_memory>
    1c70:	8cc00017 	ldw	r19,0(r17)
    1c74:	003fbd06 	br	1b6c <_gp+0xffff79c8>
    1c78:	9823883a 	mov	r17,r19
    1c7c:	2027883a 	mov	r19,r4
    1c80:	003fba06 	br	1b6c <_gp+0xffff79c8>
    1c84:	dfc00a17 	ldw	ra,40(sp)
    1c88:	df000917 	ldw	fp,36(sp)
    1c8c:	ddc00817 	ldw	r23,32(sp)
    1c90:	dd800717 	ldw	r22,28(sp)
    1c94:	dd400617 	ldw	r21,24(sp)
    1c98:	dd000517 	ldw	r20,20(sp)
    1c9c:	dcc00417 	ldw	r19,16(sp)
    1ca0:	dc800317 	ldw	r18,12(sp)
    1ca4:	dc400217 	ldw	r17,8(sp)
    1ca8:	dc000117 	ldw	r16,4(sp)
    1cac:	dec00b04 	addi	sp,sp,44
    1cb0:	f800283a 	ret

00001cb4 <__divsi3>:
    1cb4:	20001b16 	blt	r4,zero,1d24 <__divsi3+0x70>
    1cb8:	000f883a 	mov	r7,zero
    1cbc:	28001616 	blt	r5,zero,1d18 <__divsi3+0x64>
    1cc0:	200d883a 	mov	r6,r4
    1cc4:	29001a2e 	bgeu	r5,r4,1d30 <__divsi3+0x7c>
    1cc8:	00800804 	movi	r2,32
    1ccc:	00c00044 	movi	r3,1
    1cd0:	00000106 	br	1cd8 <__divsi3+0x24>
    1cd4:	10000d26 	beq	r2,zero,1d0c <__divsi3+0x58>
    1cd8:	294b883a 	add	r5,r5,r5
    1cdc:	10bfffc4 	addi	r2,r2,-1
    1ce0:	18c7883a 	add	r3,r3,r3
    1ce4:	293ffb36 	bltu	r5,r4,1cd4 <_gp+0xffff7b30>
    1ce8:	0005883a 	mov	r2,zero
    1cec:	18000726 	beq	r3,zero,1d0c <__divsi3+0x58>
    1cf0:	0005883a 	mov	r2,zero
    1cf4:	31400236 	bltu	r6,r5,1d00 <__divsi3+0x4c>
    1cf8:	314dc83a 	sub	r6,r6,r5
    1cfc:	10c4b03a 	or	r2,r2,r3
    1d00:	1806d07a 	srli	r3,r3,1
    1d04:	280ad07a 	srli	r5,r5,1
    1d08:	183ffa1e 	bne	r3,zero,1cf4 <_gp+0xffff7b50>
    1d0c:	38000126 	beq	r7,zero,1d14 <__divsi3+0x60>
    1d10:	0085c83a 	sub	r2,zero,r2
    1d14:	f800283a 	ret
    1d18:	014bc83a 	sub	r5,zero,r5
    1d1c:	39c0005c 	xori	r7,r7,1
    1d20:	003fe706 	br	1cc0 <_gp+0xffff7b1c>
    1d24:	0109c83a 	sub	r4,zero,r4
    1d28:	01c00044 	movi	r7,1
    1d2c:	003fe306 	br	1cbc <_gp+0xffff7b18>
    1d30:	00c00044 	movi	r3,1
    1d34:	003fee06 	br	1cf0 <_gp+0xffff7b4c>

00001d38 <__modsi3>:
    1d38:	20001716 	blt	r4,zero,1d98 <__modsi3+0x60>
    1d3c:	000f883a 	mov	r7,zero
    1d40:	2005883a 	mov	r2,r4
    1d44:	28001216 	blt	r5,zero,1d90 <__modsi3+0x58>
    1d48:	2900162e 	bgeu	r5,r4,1da4 <__modsi3+0x6c>
    1d4c:	01800804 	movi	r6,32
    1d50:	00c00044 	movi	r3,1
    1d54:	00000106 	br	1d5c <__modsi3+0x24>
    1d58:	30000a26 	beq	r6,zero,1d84 <__modsi3+0x4c>
    1d5c:	294b883a 	add	r5,r5,r5
    1d60:	31bfffc4 	addi	r6,r6,-1
    1d64:	18c7883a 	add	r3,r3,r3
    1d68:	293ffb36 	bltu	r5,r4,1d58 <_gp+0xffff7bb4>
    1d6c:	18000526 	beq	r3,zero,1d84 <__modsi3+0x4c>
    1d70:	1806d07a 	srli	r3,r3,1
    1d74:	11400136 	bltu	r2,r5,1d7c <__modsi3+0x44>
    1d78:	1145c83a 	sub	r2,r2,r5
    1d7c:	280ad07a 	srli	r5,r5,1
    1d80:	183ffb1e 	bne	r3,zero,1d70 <_gp+0xffff7bcc>
    1d84:	38000126 	beq	r7,zero,1d8c <__modsi3+0x54>
    1d88:	0085c83a 	sub	r2,zero,r2
    1d8c:	f800283a 	ret
    1d90:	014bc83a 	sub	r5,zero,r5
    1d94:	003fec06 	br	1d48 <_gp+0xffff7ba4>
    1d98:	0109c83a 	sub	r4,zero,r4
    1d9c:	01c00044 	movi	r7,1
    1da0:	003fe706 	br	1d40 <_gp+0xffff7b9c>
    1da4:	00c00044 	movi	r3,1
    1da8:	003ff106 	br	1d70 <_gp+0xffff7bcc>

00001dac <__udivsi3>:
    1dac:	200d883a 	mov	r6,r4
    1db0:	2900152e 	bgeu	r5,r4,1e08 <__udivsi3+0x5c>
    1db4:	28001416 	blt	r5,zero,1e08 <__udivsi3+0x5c>
    1db8:	00800804 	movi	r2,32
    1dbc:	00c00044 	movi	r3,1
    1dc0:	00000206 	br	1dcc <__udivsi3+0x20>
    1dc4:	10000e26 	beq	r2,zero,1e00 <__udivsi3+0x54>
    1dc8:	28000516 	blt	r5,zero,1de0 <__udivsi3+0x34>
    1dcc:	294b883a 	add	r5,r5,r5
    1dd0:	10bfffc4 	addi	r2,r2,-1
    1dd4:	18c7883a 	add	r3,r3,r3
    1dd8:	293ffa36 	bltu	r5,r4,1dc4 <_gp+0xffff7c20>
    1ddc:	18000826 	beq	r3,zero,1e00 <__udivsi3+0x54>
    1de0:	0005883a 	mov	r2,zero
    1de4:	31400236 	bltu	r6,r5,1df0 <__udivsi3+0x44>
    1de8:	314dc83a 	sub	r6,r6,r5
    1dec:	10c4b03a 	or	r2,r2,r3
    1df0:	1806d07a 	srli	r3,r3,1
    1df4:	280ad07a 	srli	r5,r5,1
    1df8:	183ffa1e 	bne	r3,zero,1de4 <_gp+0xffff7c40>
    1dfc:	f800283a 	ret
    1e00:	0005883a 	mov	r2,zero
    1e04:	f800283a 	ret
    1e08:	00c00044 	movi	r3,1
    1e0c:	003ff406 	br	1de0 <_gp+0xffff7c3c>

00001e10 <__umodsi3>:
    1e10:	2005883a 	mov	r2,r4
    1e14:	2900122e 	bgeu	r5,r4,1e60 <__umodsi3+0x50>
    1e18:	28001116 	blt	r5,zero,1e60 <__umodsi3+0x50>
    1e1c:	01800804 	movi	r6,32
    1e20:	00c00044 	movi	r3,1
    1e24:	00000206 	br	1e30 <__umodsi3+0x20>
    1e28:	30000c26 	beq	r6,zero,1e5c <__umodsi3+0x4c>
    1e2c:	28000516 	blt	r5,zero,1e44 <__umodsi3+0x34>
    1e30:	294b883a 	add	r5,r5,r5
    1e34:	31bfffc4 	addi	r6,r6,-1
    1e38:	18c7883a 	add	r3,r3,r3
    1e3c:	293ffa36 	bltu	r5,r4,1e28 <_gp+0xffff7c84>
    1e40:	18000626 	beq	r3,zero,1e5c <__umodsi3+0x4c>
    1e44:	1806d07a 	srli	r3,r3,1
    1e48:	11400136 	bltu	r2,r5,1e50 <__umodsi3+0x40>
    1e4c:	1145c83a 	sub	r2,r2,r5
    1e50:	280ad07a 	srli	r5,r5,1
    1e54:	183ffb1e 	bne	r3,zero,1e44 <_gp+0xffff7ca0>
    1e58:	f800283a 	ret
    1e5c:	f800283a 	ret
    1e60:	00c00044 	movi	r3,1
    1e64:	003ff706 	br	1e44 <_gp+0xffff7ca0>

00001e68 <__mulsi3>:
    1e68:	0005883a 	mov	r2,zero
    1e6c:	20000726 	beq	r4,zero,1e8c <__mulsi3+0x24>
    1e70:	20c0004c 	andi	r3,r4,1
    1e74:	2008d07a 	srli	r4,r4,1
    1e78:	18000126 	beq	r3,zero,1e80 <__mulsi3+0x18>
    1e7c:	1145883a 	add	r2,r2,r5
    1e80:	294b883a 	add	r5,r5,r5
    1e84:	203ffa1e 	bne	r4,zero,1e70 <_gp+0xffff7ccc>
    1e88:	f800283a 	ret
    1e8c:	f800283a 	ret

00001e90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    1e90:	defffd04 	addi	sp,sp,-12
    1e94:	df000215 	stw	fp,8(sp)
    1e98:	df000204 	addi	fp,sp,8
    1e9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    1ea0:	0001883a 	nop
    1ea4:	e0bfff17 	ldw	r2,-4(fp)
    1ea8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    1eac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    1eb0:	10000226 	beq	r2,zero,1ebc <_exit+0x2c>
    ALT_SIM_FAIL();
    1eb4:	002af070 	cmpltui	zero,zero,43969
    1eb8:	00000106 	br	1ec0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    1ebc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    1ec0:	003fff06 	br	1ec0 <_gp+0xffff7d1c>
